note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GSL_INTERP_ACCEL_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	cache: INTEGER
			-- Access member `cache`
		require
			exists: exists
		do
			Result := c_cache (item)
		ensure
			result_correct: Result = c_cache (item)
		end

	set_cache (a_value: INTEGER) 
			-- Change the value of member `cache` to `a_value`.
		require
			exists: exists
		do
			set_c_cache (item, a_value)
		ensure
			cache_set: a_value = cache
		end

	miss_count: INTEGER
			-- Access member `miss_count`
		require
			exists: exists
		do
			Result := c_miss_count (item)
		ensure
			result_correct: Result = c_miss_count (item)
		end

	set_miss_count (a_value: INTEGER) 
			-- Change the value of member `miss_count` to `a_value`.
		require
			exists: exists
		do
			set_c_miss_count (item, a_value)
		ensure
			miss_count_set: a_value = miss_count
		end

	hit_count: INTEGER
			-- Access member `hit_count`
		require
			exists: exists
		do
			Result := c_hit_count (item)
		ensure
			result_correct: Result = c_hit_count (item)
		end

	set_hit_count (a_value: INTEGER) 
			-- Change the value of member `hit_count` to `a_value`.
		require
			exists: exists
		do
			set_c_hit_count (item, a_value)
		ensure
			hit_count_set: a_value = hit_count
		end

feature {NONE} -- Implementation wrapper for struct gsl_interp_accel

	sizeof_external: INTEGER 
		external
			"C inline use <eif_gsl.h>"
		alias
			"sizeof(gsl_interp_accel)"
		end

	c_cache (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_accel*)$an_item)->cache
			]"
		end

	set_c_cache (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_accel*)$an_item)->cache =  (size_t)$a_value
			]"
		ensure
			cache_set: a_value = c_cache (an_item)
		end

	c_miss_count (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_accel*)$an_item)->miss_count
			]"
		end

	set_c_miss_count (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_accel*)$an_item)->miss_count =  (size_t)$a_value
			]"
		ensure
			miss_count_set: a_value = c_miss_count (an_item)
		end

	c_hit_count (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_accel*)$an_item)->hit_count
			]"
		end

	set_c_hit_count (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_accel*)$an_item)->hit_count =  (size_t)$a_value
			]"
		ensure
			hit_count_set: a_value = c_hit_count (an_item)
		end

end
