note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GSL_STATISTICS_CHAR_FUNCTIONS_API


feature -- Access

	gsl_stats_char_mean (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_mean (data.area.base_address, stride, n)
		end

	gsl_stats_char_variance (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_variance (data.area.base_address, stride, n)
		end

	gsl_stats_char_sd (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_sd (data.area.base_address, stride, n)
		end

	gsl_stats_char_variance_with_fixed_mean (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_variance_with_fixed_mean (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_sd_with_fixed_mean (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_sd_with_fixed_mean (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_tss (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_tss (data.area.base_address, stride, n)
		end

	gsl_stats_char_tss_m (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_tss_m (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_absdev (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_absdev (data.area.base_address, stride, n)
		end

	gsl_stats_char_skew (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_skew (data.area.base_address, stride, n)
		end

	gsl_stats_char_kurtosis (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_kurtosis (data.area.base_address, stride, n)
		end

	gsl_stats_char_lag1_autocorrelation (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_lag1_autocorrelation (data.area.base_address, stride, n)
		end

	gsl_stats_char_covariance (data1: ARRAY [CHARACTER]; stride1: INTEGER; data2: ARRAY [CHARACTER]; stride2: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_covariance (data1.area.base_address, stride1, data2.area.base_address, stride2, n)
		end

	gsl_stats_char_correlation (data1: ARRAY [CHARACTER]; stride1: INTEGER; data2: ARRAY [CHARACTER]; stride2: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_correlation (data1.area.base_address, stride1, data2.area.base_address, stride2, n)
		end

	gsl_stats_char_spearman (data1: ARRAY [CHARACTER]; stride1: INTEGER; data2: ARRAY [CHARACTER]; stride2: INTEGER; n: INTEGER; work: ARRAY [REAL_64]): REAL_64 
		do
			Result := c_gsl_stats_char_spearman (data1.area.base_address, stride1, data2.area.base_address, stride2, n, work.area.base_address)
		end

	gsl_stats_char_variance_m (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_variance_m (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_sd_m (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_sd_m (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_absdev_m (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_absdev_m (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_skew_m_sd (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64; sd: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_skew_m_sd (data.area.base_address, stride, n, mean, sd)
		end

	gsl_stats_char_kurtosis_m_sd (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64; sd: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_kurtosis_m_sd (data.area.base_address, stride, n, mean, sd)
		end

	gsl_stats_char_lag1_autocorrelation_m (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_lag1_autocorrelation_m (data.area.base_address, stride, n, mean)
		end

	gsl_stats_char_covariance_m (data1: ARRAY [CHARACTER]; stride1: INTEGER; data2: ARRAY [CHARACTER]; stride2: INTEGER; n: INTEGER; mean1: REAL_64; mean2: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_covariance_m (data1.area.base_address, stride1, data2.area.base_address, stride2, n, mean1, mean2)
		end

	gsl_stats_char_pvariance (data1: ARRAY [CHARACTER]; stride1: INTEGER; n1: INTEGER; data2: ARRAY [CHARACTER]; stride2: INTEGER; n2: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_pvariance (data1.area.base_address, stride1, n1, data2.area.base_address, stride2, n2)
		end

	gsl_stats_char_ttest (data1: ARRAY [CHARACTER]; stride1: INTEGER; n1: INTEGER; data2: ARRAY [CHARACTER]; stride2: INTEGER; n2: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_ttest (data1.area.base_address, stride1, n1, data2.area.base_address, stride2, n2)
		end

	gsl_stats_char_max (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): CHARACTER 
		do
			Result := c_gsl_stats_char_max (data.area.base_address, stride, n)
		end

	gsl_stats_char_min (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): CHARACTER 
		do
			Result := c_gsl_stats_char_min (data.area.base_address, stride, n)
		end

	gsl_stats_char_minmax (min: STRING; max: STRING; data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER) 
		local
			min_c_string: C_STRING
			max_c_string: C_STRING
		do
			create min_c_string.make (min)
			create max_c_string.make (max)
			c_gsl_stats_char_minmax (min_c_string.item, max_c_string.item, data.area.base_address, stride, n)
		end

	gsl_stats_char_max_index (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): INTEGER 
		do
			Result := c_gsl_stats_char_max_index (data.area.base_address, stride, n)
		end

	gsl_stats_char_min_index (data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): INTEGER 
		do
			Result := c_gsl_stats_char_min_index (data.area.base_address, stride, n)
		end

	gsl_stats_char_minmax_index (min_index: POINTER; max_index: POINTER; data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER) 
		do
			c_gsl_stats_char_minmax_index (min_index, max_index, data.area.base_address, stride, n)
		end

	gsl_stats_char_median_from_sorted_data (sorted_data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER): REAL_64 
		do
			Result := c_gsl_stats_char_median_from_sorted_data (sorted_data.area.base_address, stride, n)
		end

	gsl_stats_char_quantile_from_sorted_data (sorted_data: ARRAY [CHARACTER]; stride: INTEGER; n: INTEGER; f: REAL_64): REAL_64 
		do
			Result := c_gsl_stats_char_quantile_from_sorted_data (sorted_data.area.base_address, stride, n, f)
		end

feature -- Externals

	c_gsl_stats_char_mean (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_mean ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_variance (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_variance ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_sd (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_sd ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_variance_with_fixed_mean (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_variance_with_fixed_mean ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_sd_with_fixed_mean (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_sd_with_fixed_mean ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_tss (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_tss ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_tss_m (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_tss_m ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_absdev (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_absdev ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_skew (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_skew ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_kurtosis (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_kurtosis ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_lag1_autocorrelation (data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_lag1_autocorrelation ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_covariance (data1: POINTER; stride1: INTEGER; data2: POINTER; stride2: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_covariance ($data1, (size_t const)$stride1, $data2, (size_t const)$stride2, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_correlation (data1: POINTER; stride1: INTEGER; data2: POINTER; stride2: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_correlation ($data1, (size_t const)$stride1, $data2, (size_t const)$stride2, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_spearman (data1: POINTER; stride1: INTEGER; data2: POINTER; stride2: INTEGER; n: INTEGER; work: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_spearman ($data1, (size_t const)$stride1, $data2, (size_t const)$stride2, (size_t const)$n, $work);
			]"
		end

	c_gsl_stats_char_variance_m (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_variance_m ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_sd_m (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_sd_m ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_absdev_m (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_absdev_m ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_skew_m_sd (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64; sd: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_skew_m_sd ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean, (double const)$sd);
			]"
		end

	c_gsl_stats_char_kurtosis_m_sd (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64; sd: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_kurtosis_m_sd ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean, (double const)$sd);
			]"
		end

	c_gsl_stats_char_lag1_autocorrelation_m (data: POINTER; stride: INTEGER; n: INTEGER; mean: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_lag1_autocorrelation_m ($data, (size_t const)$stride, (size_t const)$n, (double const)$mean);
			]"
		end

	c_gsl_stats_char_covariance_m (data1: POINTER; stride1: INTEGER; data2: POINTER; stride2: INTEGER; n: INTEGER; mean1: REAL_64; mean2: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_covariance_m ($data1, (size_t const)$stride1, $data2, (size_t const)$stride2, (size_t const)$n, (double const)$mean1, (double const)$mean2);
			]"
		end

	c_gsl_stats_char_pvariance (data1: POINTER; stride1: INTEGER; n1: INTEGER; data2: POINTER; stride2: INTEGER; n2: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_pvariance ($data1, (size_t const)$stride1, (size_t const)$n1, $data2, (size_t const)$stride2, (size_t const)$n2);
			]"
		end

	c_gsl_stats_char_ttest (data1: POINTER; stride1: INTEGER; n1: INTEGER; data2: POINTER; stride2: INTEGER; n2: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_ttest ($data1, (size_t const)$stride1, (size_t const)$n1, $data2, (size_t const)$stride2, (size_t const)$n2);
			]"
		end

	c_gsl_stats_char_max (data: POINTER; stride: INTEGER; n: INTEGER): CHARACTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_max ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_min (data: POINTER; stride: INTEGER; n: INTEGER): CHARACTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_min ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_minmax (min: POINTER; max: POINTER; data: POINTER; stride: INTEGER; n: INTEGER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_stats_char_minmax ((char*)$min, (char*)$max, $data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_max_index (data: POINTER; stride: INTEGER; n: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_max_index ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_min_index (data: POINTER; stride: INTEGER; n: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_min_index ($data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_minmax_index (min_index: POINTER; max_index: POINTER; data: POINTER; stride: INTEGER; n: INTEGER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_stats_char_minmax_index ((size_t*)$min_index, (size_t*)$max_index, $data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_median_from_sorted_data (sorted_data: POINTER; stride: INTEGER; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_median_from_sorted_data ($sorted_data, (size_t const)$stride, (size_t const)$n);
			]"
		end

	c_gsl_stats_char_quantile_from_sorted_data (sorted_data: POINTER; stride: INTEGER; n: INTEGER; f: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_stats_char_quantile_from_sorted_data ($sorted_data, (size_t const)$stride, (size_t const)$n, (double const)$f);
			]"
		end

feature -- Externals Address

end
