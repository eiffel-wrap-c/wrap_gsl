note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GSL_INTERP_TYPE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	name:  detachable STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, (create {C_STRING}.make (a_value)).item )
		end

	min_size: INTEGER
			-- Access member `min_size`
		require
			exists: exists
		do
			Result := c_min_size (item)
		ensure
			result_correct: Result = c_min_size (item)
		end

	set_min_size (a_value: INTEGER) 
			-- Change the value of member `min_size` to `a_value`.
		require
			exists: exists
		do
			set_c_min_size (item, a_value)
		ensure
			min_size_set: a_value = min_size
		end

	alloc: POINTER
			-- Access member `alloc`
		require
			exists: exists
		do
			Result := c_alloc (item)
		ensure
			result_correct: Result = c_alloc (item)
		end

	set_alloc (a_value: POINTER) 
			-- Change the value of member `alloc` to `a_value`.
		require
			exists: exists
		do
			set_c_alloc (item, a_value)
		ensure
			alloc_set: a_value = alloc
		end

	init: POINTER
			-- Access member `init`
		require
			exists: exists
		do
			Result := c_init (item)
		ensure
			result_correct: Result = c_init (item)
		end

	set_init (a_value: POINTER) 
			-- Change the value of member `init` to `a_value`.
		require
			exists: exists
		do
			set_c_init (item, a_value)
		ensure
			init_set: a_value = init
		end

	eval: POINTER
			-- Access member `eval`
		require
			exists: exists
		do
			Result := c_eval (item)
		ensure
			result_correct: Result = c_eval (item)
		end

	set_eval (a_value: POINTER) 
			-- Change the value of member `eval` to `a_value`.
		require
			exists: exists
		do
			set_c_eval (item, a_value)
		ensure
			eval_set: a_value = eval
		end

	eval_deriv: POINTER
			-- Access member `eval_deriv`
		require
			exists: exists
		do
			Result := c_eval_deriv (item)
		ensure
			result_correct: Result = c_eval_deriv (item)
		end

	set_eval_deriv (a_value: POINTER) 
			-- Change the value of member `eval_deriv` to `a_value`.
		require
			exists: exists
		do
			set_c_eval_deriv (item, a_value)
		ensure
			eval_deriv_set: a_value = eval_deriv
		end

	eval_deriv2: POINTER
			-- Access member `eval_deriv2`
		require
			exists: exists
		do
			Result := c_eval_deriv2 (item)
		ensure
			result_correct: Result = c_eval_deriv2 (item)
		end

	set_eval_deriv2 (a_value: POINTER) 
			-- Change the value of member `eval_deriv2` to `a_value`.
		require
			exists: exists
		do
			set_c_eval_deriv2 (item, a_value)
		ensure
			eval_deriv2_set: a_value = eval_deriv2
		end

	eval_integ: POINTER
			-- Access member `eval_integ`
		require
			exists: exists
		do
			Result := c_eval_integ (item)
		ensure
			result_correct: Result = c_eval_integ (item)
		end

	set_eval_integ (a_value: POINTER) 
			-- Change the value of member `eval_integ` to `a_value`.
		require
			exists: exists
		do
			set_c_eval_integ (item, a_value)
		ensure
			eval_integ_set: a_value = eval_integ
		end

	free: POINTER
			-- Access member `free`
		require
			exists: exists
		do
			Result := c_free (item)
		ensure
			result_correct: Result = c_free (item)
		end

	set_free (a_value: POINTER) 
			-- Change the value of member `free` to `a_value`.
		require
			exists: exists
		do
			set_c_free (item, a_value)
		ensure
			free_set: a_value = free
		end

feature {NONE} -- Implementation wrapper for struct gsl_interp_type

	sizeof_external: INTEGER 
		external
			"C inline use <eif_gsl.h>"
		alias
			"sizeof(gsl_interp_type)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_min_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->min_size
			]"
		end

	set_c_min_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->min_size =  (unsigned int)$a_value
			]"
		ensure
			min_size_set: a_value = c_min_size (an_item)
		end

	c_alloc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->alloc
			]"
		end

	set_c_alloc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->alloc =  (void *(*) (size_t size))$a_value
			]"
		ensure
			alloc_set: a_value = c_alloc (an_item)
		end

	c_init (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->init
			]"
		end

	set_c_init (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->init =  (int (*) (void *anonymous_1, double const xa[], double const ya[], size_t size))$a_value
			]"
		ensure
			init_set: a_value = c_init (an_item)
		end

	c_eval (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval
			]"
		end

	set_c_eval (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval =  (int (*) (void const *anonymous_1, double const xa[], double const ya[], size_t size, double x, gsl_interp_accel *anonymous_2, double *y))$a_value
			]"
		ensure
			eval_set: a_value = c_eval (an_item)
		end

	c_eval_deriv (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval_deriv
			]"
		end

	set_c_eval_deriv (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval_deriv =  (int (*) (void const *anonymous_1, double const xa[], double const ya[], size_t size, double x, gsl_interp_accel *anonymous_2, double *y_p))$a_value
			]"
		ensure
			eval_deriv_set: a_value = c_eval_deriv (an_item)
		end

	c_eval_deriv2 (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval_deriv2
			]"
		end

	set_c_eval_deriv2 (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval_deriv2 =  (int (*) (void const *anonymous_1, double const xa[], double const ya[], size_t size, double x, gsl_interp_accel *anonymous_2, double *y_pp))$a_value
			]"
		ensure
			eval_deriv2_set: a_value = c_eval_deriv2 (an_item)
		end

	c_eval_integ (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval_integ
			]"
		end

	set_c_eval_integ (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->eval_integ =  (int (*) (void const *anonymous_1, double const xa[], double const ya[], size_t size, gsl_interp_accel *anonymous_2, double a, double b, double *a_result))$a_value
			]"
		ensure
			eval_integ_set: a_value = c_eval_integ (an_item)
		end

	c_free (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->free
			]"
		end

	set_c_free (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_interp_type*)$an_item)->free =  (void (*) (void *anonymous_1))$a_value
			]"
		ensure
			free_set: a_value = c_free (an_item)
		end

end
