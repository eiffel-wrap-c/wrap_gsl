note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GSL_BSPLINE_WORKSPACE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	k: INTEGER
			-- Access member `k`
		require
			exists: exists
		do
			Result := c_k (item)
		ensure
			result_correct: Result = c_k (item)
		end

	set_k (a_value: INTEGER) 
			-- Change the value of member `k` to `a_value`.
		require
			exists: exists
		do
			set_c_k (item, a_value)
		ensure
			k_set: a_value = k
		end

	km1: INTEGER
			-- Access member `km1`
		require
			exists: exists
		do
			Result := c_km1 (item)
		ensure
			result_correct: Result = c_km1 (item)
		end

	set_km1 (a_value: INTEGER) 
			-- Change the value of member `km1` to `a_value`.
		require
			exists: exists
		do
			set_c_km1 (item, a_value)
		ensure
			km1_set: a_value = km1
		end

	l: INTEGER
			-- Access member `l`
		require
			exists: exists
		do
			Result := c_l (item)
		ensure
			result_correct: Result = c_l (item)
		end

	set_l (a_value: INTEGER) 
			-- Change the value of member `l` to `a_value`.
		require
			exists: exists
		do
			set_c_l (item, a_value)
		ensure
			l_set: a_value = l
		end

	nbreak: INTEGER
			-- Access member `nbreak`
		require
			exists: exists
		do
			Result := c_nbreak (item)
		ensure
			result_correct: Result = c_nbreak (item)
		end

	set_nbreak (a_value: INTEGER) 
			-- Change the value of member `nbreak` to `a_value`.
		require
			exists: exists
		do
			set_c_nbreak (item, a_value)
		ensure
			nbreak_set: a_value = nbreak
		end

	n: INTEGER
			-- Access member `n`
		require
			exists: exists
		do
			Result := c_n (item)
		ensure
			result_correct: Result = c_n (item)
		end

	set_n (a_value: INTEGER) 
			-- Change the value of member `n` to `a_value`.
		require
			exists: exists
		do
			set_c_n (item, a_value)
		ensure
			n_set: a_value = n
		end

	knots: detachable GSL_VECTOR_STRUCT_API 
			-- Access member `knots`
		require
			exists: exists
		do
			if attached c_knots (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_knots (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_knots (item) 
		end

	set_knots (a_value: GSL_VECTOR_STRUCT_API) 
			-- Set member `knots`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_knots (item, a_value.item)
		ensure
			knots_set: attached knots as l_value implies l_value.item = a_value.item
		end

	deltal: detachable GSL_VECTOR_STRUCT_API 
			-- Access member `deltal`
		require
			exists: exists
		do
			if attached c_deltal (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_deltal (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_deltal (item) 
		end

	set_deltal (a_value: GSL_VECTOR_STRUCT_API) 
			-- Set member `deltal`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_deltal (item, a_value.item)
		ensure
			deltal_set: attached deltal as l_value implies l_value.item = a_value.item
		end

	deltar: detachable GSL_VECTOR_STRUCT_API 
			-- Access member `deltar`
		require
			exists: exists
		do
			if attached c_deltar (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_deltar (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_deltar (item) 
		end

	set_deltar (a_value: GSL_VECTOR_STRUCT_API) 
			-- Set member `deltar`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_deltar (item, a_value.item)
		ensure
			deltar_set: attached deltar as l_value implies l_value.item = a_value.item
		end

	b: detachable GSL_VECTOR_STRUCT_API 
			-- Access member `B`
		require
			exists: exists
		do
			if attached c_b (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_b (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_b (item) 
		end

	set_b (a_value: GSL_VECTOR_STRUCT_API) 
			-- Set member `B`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_b (item, a_value.item)
		ensure
			b_set: attached b as l_value implies l_value.item = a_value.item
		end

	a: detachable GSL_MATRIX_STRUCT_API 
			-- Access member `A`
		require
			exists: exists
		do
			if attached c_a (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_a (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_a (item) 
		end

	set_a (a_value: GSL_MATRIX_STRUCT_API) 
			-- Set member `A`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_a (item, a_value.item)
		ensure
			a_set: attached a as l_value implies l_value.item = a_value.item
		end

	db: detachable GSL_MATRIX_STRUCT_API 
			-- Access member `dB`
		require
			exists: exists
		do
			if attached c_db (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_db (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_db (item) 
		end

	set_db (a_value: GSL_MATRIX_STRUCT_API) 
			-- Set member `dB`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_db (item, a_value.item)
		ensure
			db_set: attached db as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct gsl_bspline_workspace

	sizeof_external: INTEGER 
		external
			"C inline use <eif_gsl.h>"
		alias
			"sizeof(gsl_bspline_workspace)"
		end

	c_k (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->k
			]"
		end

	set_c_k (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->k =  (size_t)$a_value
			]"
		ensure
			k_set: a_value = c_k (an_item)
		end

	c_km1 (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->km1
			]"
		end

	set_c_km1 (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->km1 =  (size_t)$a_value
			]"
		ensure
			km1_set: a_value = c_km1 (an_item)
		end

	c_l (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->l
			]"
		end

	set_c_l (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->l =  (size_t)$a_value
			]"
		ensure
			l_set: a_value = c_l (an_item)
		end

	c_nbreak (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->nbreak
			]"
		end

	set_c_nbreak (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->nbreak =  (size_t)$a_value
			]"
		ensure
			nbreak_set: a_value = c_nbreak (an_item)
		end

	c_n (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->n
			]"
		end

	set_c_n (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->n =  (size_t)$a_value
			]"
		ensure
			n_set: a_value = c_n (an_item)
		end

	c_knots (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->knots
			]"
		end

	set_c_knots (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->knots =  (gsl_vector*)$a_value
			]"
		ensure
			knots_set: a_value = c_knots (an_item)
		end

	c_deltal (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->deltal
			]"
		end

	set_c_deltal (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->deltal =  (gsl_vector*)$a_value
			]"
		ensure
			deltal_set: a_value = c_deltal (an_item)
		end

	c_deltar (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->deltar
			]"
		end

	set_c_deltar (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->deltar =  (gsl_vector*)$a_value
			]"
		ensure
			deltar_set: a_value = c_deltar (an_item)
		end

	c_b (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->B
			]"
		end

	set_c_b (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->B =  (gsl_vector*)$a_value
			]"
		ensure
			b_set: a_value = c_b (an_item)
		end

	c_a (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->A
			]"
		end

	set_c_a (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->A =  (gsl_matrix*)$a_value
			]"
		ensure
			a_set: a_value = c_a (an_item)
		end

	c_db (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->dB
			]"
		end

	set_c_db (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_bspline_workspace*)$an_item)->dB =  (gsl_matrix*)$a_value
			]"
		ensure
			db_set: a_value = c_db (an_item)
		end

end
