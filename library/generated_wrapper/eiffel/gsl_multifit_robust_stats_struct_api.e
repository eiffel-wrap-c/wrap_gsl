note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GSL_MULTIFIT_ROBUST_STATS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	sigma_ols: REAL_64
			-- Access member `sigma_ols`
		require
			exists: exists
		do
			Result := c_sigma_ols (item)
		ensure
			result_correct: Result = c_sigma_ols (item)
		end

	set_sigma_ols (a_value: REAL_64) 
			-- Change the value of member `sigma_ols` to `a_value`.
		require
			exists: exists
		do
			set_c_sigma_ols (item, a_value)
		ensure
			sigma_ols_set: a_value = sigma_ols
		end

	sigma_mad: REAL_64
			-- Access member `sigma_mad`
		require
			exists: exists
		do
			Result := c_sigma_mad (item)
		ensure
			result_correct: Result = c_sigma_mad (item)
		end

	set_sigma_mad (a_value: REAL_64) 
			-- Change the value of member `sigma_mad` to `a_value`.
		require
			exists: exists
		do
			set_c_sigma_mad (item, a_value)
		ensure
			sigma_mad_set: a_value = sigma_mad
		end

	sigma_rob: REAL_64
			-- Access member `sigma_rob`
		require
			exists: exists
		do
			Result := c_sigma_rob (item)
		ensure
			result_correct: Result = c_sigma_rob (item)
		end

	set_sigma_rob (a_value: REAL_64) 
			-- Change the value of member `sigma_rob` to `a_value`.
		require
			exists: exists
		do
			set_c_sigma_rob (item, a_value)
		ensure
			sigma_rob_set: a_value = sigma_rob
		end

	sigma: REAL_64
			-- Access member `sigma`
		require
			exists: exists
		do
			Result := c_sigma (item)
		ensure
			result_correct: Result = c_sigma (item)
		end

	set_sigma (a_value: REAL_64) 
			-- Change the value of member `sigma` to `a_value`.
		require
			exists: exists
		do
			set_c_sigma (item, a_value)
		ensure
			sigma_set: a_value = sigma
		end

	rsq: REAL_64
			-- Access member `Rsq`
		require
			exists: exists
		do
			Result := c_rsq (item)
		ensure
			result_correct: Result = c_rsq (item)
		end

	set_rsq (a_value: REAL_64) 
			-- Change the value of member `Rsq` to `a_value`.
		require
			exists: exists
		do
			set_c_rsq (item, a_value)
		ensure
			rsq_set: a_value = rsq
		end

	adj_rsq: REAL_64
			-- Access member `adj_Rsq`
		require
			exists: exists
		do
			Result := c_adj_rsq (item)
		ensure
			result_correct: Result = c_adj_rsq (item)
		end

	set_adj_rsq (a_value: REAL_64) 
			-- Change the value of member `adj_Rsq` to `a_value`.
		require
			exists: exists
		do
			set_c_adj_rsq (item, a_value)
		ensure
			adj_rsq_set: a_value = adj_rsq
		end

	rmse: REAL_64
			-- Access member `rmse`
		require
			exists: exists
		do
			Result := c_rmse (item)
		ensure
			result_correct: Result = c_rmse (item)
		end

	set_rmse (a_value: REAL_64) 
			-- Change the value of member `rmse` to `a_value`.
		require
			exists: exists
		do
			set_c_rmse (item, a_value)
		ensure
			rmse_set: a_value = rmse
		end

	sse: REAL_64
			-- Access member `sse`
		require
			exists: exists
		do
			Result := c_sse (item)
		ensure
			result_correct: Result = c_sse (item)
		end

	set_sse (a_value: REAL_64) 
			-- Change the value of member `sse` to `a_value`.
		require
			exists: exists
		do
			set_c_sse (item, a_value)
		ensure
			sse_set: a_value = sse
		end

	dof: INTEGER
			-- Access member `dof`
		require
			exists: exists
		do
			Result := c_dof (item)
		ensure
			result_correct: Result = c_dof (item)
		end

	set_dof (a_value: INTEGER) 
			-- Change the value of member `dof` to `a_value`.
		require
			exists: exists
		do
			set_c_dof (item, a_value)
		ensure
			dof_set: a_value = dof
		end

	numit: INTEGER
			-- Access member `numit`
		require
			exists: exists
		do
			Result := c_numit (item)
		ensure
			result_correct: Result = c_numit (item)
		end

	set_numit (a_value: INTEGER) 
			-- Change the value of member `numit` to `a_value`.
		require
			exists: exists
		do
			set_c_numit (item, a_value)
		ensure
			numit_set: a_value = numit
		end

	weights: detachable GSL_VECTOR_STRUCT_API 
			-- Access member `weights`
		require
			exists: exists
		do
			if attached c_weights (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_weights (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_weights (item) 
		end

	set_weights (a_value: GSL_VECTOR_STRUCT_API) 
			-- Set member `weights`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_weights (item, a_value.item)
		ensure
			weights_set: attached weights as l_value implies l_value.item = a_value.item
		end

	r: detachable GSL_VECTOR_STRUCT_API 
			-- Access member `r`
		require
			exists: exists
		do
			if attached c_r (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_r (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_r (item) 
		end

	set_r (a_value: GSL_VECTOR_STRUCT_API) 
			-- Set member `r`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_r (item, a_value.item)
		ensure
			r_set: attached r as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct gsl_multifit_robust_stats

	sizeof_external: INTEGER 
		external
			"C inline use <eif_gsl.h>"
		alias
			"sizeof(gsl_multifit_robust_stats)"
		end

	c_sigma_ols (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma_ols
			]"
		end

	set_c_sigma_ols (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma_ols =  (double)$a_value
			]"
		ensure
			sigma_ols_set: a_value = c_sigma_ols (an_item)
		end

	c_sigma_mad (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma_mad
			]"
		end

	set_c_sigma_mad (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma_mad =  (double)$a_value
			]"
		ensure
			sigma_mad_set: a_value = c_sigma_mad (an_item)
		end

	c_sigma_rob (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma_rob
			]"
		end

	set_c_sigma_rob (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma_rob =  (double)$a_value
			]"
		ensure
			sigma_rob_set: a_value = c_sigma_rob (an_item)
		end

	c_sigma (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma
			]"
		end

	set_c_sigma (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sigma =  (double)$a_value
			]"
		ensure
			sigma_set: a_value = c_sigma (an_item)
		end

	c_rsq (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->Rsq
			]"
		end

	set_c_rsq (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->Rsq =  (double)$a_value
			]"
		ensure
			rsq_set: a_value = c_rsq (an_item)
		end

	c_adj_rsq (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->adj_Rsq
			]"
		end

	set_c_adj_rsq (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->adj_Rsq =  (double)$a_value
			]"
		ensure
			adj_rsq_set: a_value = c_adj_rsq (an_item)
		end

	c_rmse (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->rmse
			]"
		end

	set_c_rmse (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->rmse =  (double)$a_value
			]"
		ensure
			rmse_set: a_value = c_rmse (an_item)
		end

	c_sse (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sse
			]"
		end

	set_c_sse (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->sse =  (double)$a_value
			]"
		ensure
			sse_set: a_value = c_sse (an_item)
		end

	c_dof (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->dof
			]"
		end

	set_c_dof (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->dof =  (size_t)$a_value
			]"
		ensure
			dof_set: a_value = c_dof (an_item)
		end

	c_numit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->numit
			]"
		end

	set_c_numit (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->numit =  (size_t)$a_value
			]"
		ensure
			numit_set: a_value = c_numit (an_item)
		end

	c_weights (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->weights
			]"
		end

	set_c_weights (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->weights =  (gsl_vector*)$a_value
			]"
		ensure
			weights_set: a_value = c_weights (an_item)
		end

	c_r (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->r
			]"
		end

	set_c_r (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_stats*)$an_item)->r =  (gsl_vector*)$a_value
			]"
		ensure
			r_set: a_value = c_r (an_item)
		end

end
