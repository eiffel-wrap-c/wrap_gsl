note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GSL_MULTIFIT_ROBUST_TYPE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	name:  detachable C_STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: C_STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, a_value.item )
		end

	wfun: POINTER
			-- Access member `wfun`
		require
			exists: exists
		do
			Result := c_wfun (item)
		ensure
			result_correct: Result = c_wfun (item)
		end

	set_wfun (a_value: POINTER) 
			-- Change the value of member `wfun` to `a_value`.
		require
			exists: exists
		do
			set_c_wfun (item, a_value)
		ensure
			wfun_set: a_value = wfun
		end

	psi_deriv: POINTER
			-- Access member `psi_deriv`
		require
			exists: exists
		do
			Result := c_psi_deriv (item)
		ensure
			result_correct: Result = c_psi_deriv (item)
		end

	set_psi_deriv (a_value: POINTER) 
			-- Change the value of member `psi_deriv` to `a_value`.
		require
			exists: exists
		do
			set_c_psi_deriv (item, a_value)
		ensure
			psi_deriv_set: a_value = psi_deriv
		end

	tuning_default: REAL_64
			-- Access member `tuning_default`
		require
			exists: exists
		do
			Result := c_tuning_default (item)
		ensure
			result_correct: Result = c_tuning_default (item)
		end

	set_tuning_default (a_value: REAL_64) 
			-- Change the value of member `tuning_default` to `a_value`.
		require
			exists: exists
		do
			set_c_tuning_default (item, a_value)
		ensure
			tuning_default_set: a_value = tuning_default
		end

feature {NONE} -- Implementation wrapper for struct gsl_multifit_robust_type

	sizeof_external: INTEGER 
		external
			"C inline use <eif_gsl.h>"
		alias
			"sizeof(gsl_multifit_robust_type)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_wfun (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->wfun
			]"
		end

	set_c_wfun (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->wfun =  (int (*) (gsl_vector const *r, gsl_vector *w))$a_value
			]"
		ensure
			wfun_set: a_value = c_wfun (an_item)
		end

	c_psi_deriv (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->psi_deriv
			]"
		end

	set_c_psi_deriv (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->psi_deriv =  (int (*) (gsl_vector const *r, gsl_vector *dpsi))$a_value
			]"
		ensure
			psi_deriv_set: a_value = c_psi_deriv (an_item)
		end

	c_tuning_default (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->tuning_default
			]"
		end

	set_c_tuning_default (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_multifit_robust_type*)$an_item)->tuning_default =  (double)$a_value
			]"
		ensure
			tuning_default_set: a_value = c_tuning_default (an_item)
		end

end
