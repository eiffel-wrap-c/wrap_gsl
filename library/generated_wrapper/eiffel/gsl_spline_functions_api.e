note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GSL_SPLINE_FUNCTIONS_API


feature -- Access

	gsl_spline_alloc (t: GSL_INTERP_TYPE_STRUCT_API; size: INTEGER): detachable GSL_SPLINE_STRUCT_API 
		do
			if attached c_gsl_spline_alloc (t.item, size) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	gsl_spline_init (spline: GSL_SPLINE_STRUCT_API; xa: MANAGED_POINTER; ya: MANAGED_POINTER; size: INTEGER): INTEGER 
		do
			Result := c_gsl_spline_init (spline.item, xa.item, ya.item, size)
		ensure
			instance_free: class
		end

	gsl_spline_name (spline: GSL_SPLINE_STRUCT_API): POINTER 
		do
			Result := c_gsl_spline_name (spline.item)
		ensure
			instance_free: class
		end

	gsl_spline_min_size (spline: GSL_SPLINE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_spline_min_size (spline.item)
		ensure
			instance_free: class
		end

	gsl_spline_eval_e (spline: GSL_SPLINE_STRUCT_API; x: REAL_64; a: GSL_INTERP_ACCEL_STRUCT_API; y: POINTER): INTEGER 
		do
			Result := c_gsl_spline_eval_e (spline.item, x, a.item, y)
		ensure
			instance_free: class
		end

	gsl_spline_eval (spline: GSL_SPLINE_STRUCT_API; x: REAL_64; a: GSL_INTERP_ACCEL_STRUCT_API): REAL_64 
		do
			Result := c_gsl_spline_eval (spline.item, x, a.item)
		ensure
			instance_free: class
		end

	gsl_spline_eval_deriv_e (spline: GSL_SPLINE_STRUCT_API; x: REAL_64; a: GSL_INTERP_ACCEL_STRUCT_API; y: POINTER): INTEGER 
		do
			Result := c_gsl_spline_eval_deriv_e (spline.item, x, a.item, y)
		ensure
			instance_free: class
		end

	gsl_spline_eval_deriv (spline: GSL_SPLINE_STRUCT_API; x: REAL_64; a: GSL_INTERP_ACCEL_STRUCT_API): REAL_64 
		do
			Result := c_gsl_spline_eval_deriv (spline.item, x, a.item)
		ensure
			instance_free: class
		end

	gsl_spline_eval_deriv2_e (spline: GSL_SPLINE_STRUCT_API; x: REAL_64; a: GSL_INTERP_ACCEL_STRUCT_API; y: POINTER): INTEGER 
		do
			Result := c_gsl_spline_eval_deriv2_e (spline.item, x, a.item, y)
		ensure
			instance_free: class
		end

	gsl_spline_eval_deriv2 (spline: GSL_SPLINE_STRUCT_API; x: REAL_64; a: GSL_INTERP_ACCEL_STRUCT_API): REAL_64 
		do
			Result := c_gsl_spline_eval_deriv2 (spline.item, x, a.item)
		ensure
			instance_free: class
		end

	gsl_spline_eval_integ_e (spline: GSL_SPLINE_STRUCT_API; a: REAL_64; b: REAL_64; acc: GSL_INTERP_ACCEL_STRUCT_API; y: POINTER): INTEGER 
		do
			Result := c_gsl_spline_eval_integ_e (spline.item, a, b, acc.item, y)
		ensure
			instance_free: class
		end

	gsl_spline_eval_integ (spline: GSL_SPLINE_STRUCT_API; a: REAL_64; b: REAL_64; acc: GSL_INTERP_ACCEL_STRUCT_API): REAL_64 
		do
			Result := c_gsl_spline_eval_integ (spline.item, a, b, acc.item)
		ensure
			instance_free: class
		end

	gsl_spline_free (spline: GSL_SPLINE_STRUCT_API) 
		do
			c_gsl_spline_free (spline.item)
		ensure
			instance_free: class
		end

feature -- Externals

	c_gsl_spline_alloc (t: POINTER; size: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_alloc ((gsl_interp_type const*)$t, (size_t)$size);
			]"
		end

	c_gsl_spline_init (spline: POINTER; xa: POINTER; ya: POINTER; size: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_init ((gsl_spline*)$spline, $xa, $ya, (size_t)$size);
			]"
		end

	c_gsl_spline_name (spline: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_name ((gsl_spline const*)$spline);
			]"
		end

	c_gsl_spline_min_size (spline: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_min_size ((gsl_spline const*)$spline);
			]"
		end

	c_gsl_spline_eval_e (spline: POINTER; x: REAL_64; a: POINTER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_e ((gsl_spline const*)$spline, (double)$x, (gsl_interp_accel*)$a, (double*)$y);
			]"
		end

	c_gsl_spline_eval (spline: POINTER; x: REAL_64; a: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval ((gsl_spline const*)$spline, (double)$x, (gsl_interp_accel*)$a);
			]"
		end

	c_gsl_spline_eval_deriv_e (spline: POINTER; x: REAL_64; a: POINTER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_deriv_e ((gsl_spline const*)$spline, (double)$x, (gsl_interp_accel*)$a, (double*)$y);
			]"
		end

	c_gsl_spline_eval_deriv (spline: POINTER; x: REAL_64; a: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_deriv ((gsl_spline const*)$spline, (double)$x, (gsl_interp_accel*)$a);
			]"
		end

	c_gsl_spline_eval_deriv2_e (spline: POINTER; x: REAL_64; a: POINTER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_deriv2_e ((gsl_spline const*)$spline, (double)$x, (gsl_interp_accel*)$a, (double*)$y);
			]"
		end

	c_gsl_spline_eval_deriv2 (spline: POINTER; x: REAL_64; a: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_deriv2 ((gsl_spline const*)$spline, (double)$x, (gsl_interp_accel*)$a);
			]"
		end

	c_gsl_spline_eval_integ_e (spline: POINTER; a: REAL_64; b: REAL_64; acc: POINTER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_integ_e ((gsl_spline const*)$spline, (double)$a, (double)$b, (gsl_interp_accel*)$acc, (double*)$y);
			]"
		end

	c_gsl_spline_eval_integ (spline: POINTER; a: REAL_64; b: REAL_64; acc: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_spline_eval_integ ((gsl_spline const*)$spline, (double)$a, (double)$b, (gsl_interp_accel*)$acc);
			]"
		end

	c_gsl_spline_free (spline: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_spline_free ((gsl_spline*)$spline);
			]"
		end

feature -- Externals Address

end
