note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GSL_VECTOR_COMPLEX_LONG_DOUBLE_FUNCTIONS_API


feature -- Access

	gsl_vector_complex_long_double_alloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_alloc ((size_t const)$n);
			]"
		end

	gsl_vector_complex_long_double_calloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_calloc ((size_t const)$n);
			]"
		end

	gsl_vector_complex_long_double_alloc_from_block (b: GSL_BLOCK_COMPLEX_LONG_DOUBLE_STRUCT_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_alloc_from_block (b.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_alloc_from_vector (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_alloc_from_vector (v.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_free (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API) 
		do
			c_gsl_vector_complex_long_double_free (v.item)
		end

	gsl_vector_complex_long_double_view_array (base: POINTER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_view_array (base, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_view_array_with_stride (base, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_view_array (base: POINTER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_view_array (base, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_view_array_with_stride (base, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_subvector (base: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_subvector (base.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_subvector_with_stride (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_subvector (base: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_subvector (base.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_subvector_with_stride (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_real (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): detachable GSL_VECTOR_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_real (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_imag (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): detachable GSL_VECTOR_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_imag (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_real (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): detachable GSL_VECTOR_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_real (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_imag (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): detachable GSL_VECTOR_LONG_DOUBLE_VIEW_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_imag (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_set_zero (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API) 
		do
			c_gsl_vector_complex_long_double_set_zero (v.item)
		end

	gsl_vector_complex_long_double_set_all (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; z: GSL_COMPLEX_LONG_DOUBLE_STRUCT_API) 
		do
			c_gsl_vector_complex_long_double_set_all (v.item, z.item)
		end

	gsl_vector_complex_long_double_set_basis (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_set_basis (v.item, i)
		end

	gsl_vector_complex_long_double_fread (stream: IOBUF_STRUCT_API; v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_fread (stream.item, v.item)
		end

	gsl_vector_complex_long_double_fwrite (stream: IOBUF_STRUCT_API; v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_fwrite (stream.item, v.item)
		end

	gsl_vector_complex_long_double_fscanf (stream: IOBUF_STRUCT_API; v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_fscanf (stream.item, v.item)
		end

	gsl_vector_complex_long_double_fprintf (stream: IOBUF_STRUCT_API; v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; format: STRING): INTEGER 
		local
			format_c_string: C_STRING
		do
			create format_c_string.make (format)
			Result := c_gsl_vector_complex_long_double_fprintf (stream.item, v.item, format_c_string.item)
		end

	gsl_vector_complex_long_double_memcpy (dest: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; src: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_memcpy (dest.item, src.item)
		end

	gsl_vector_complex_long_double_reverse (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_reverse (v.item)
		end

	gsl_vector_complex_long_double_swap (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; w: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_swap (v.item, w.item)
		end

	gsl_vector_complex_long_double_swap_elements (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER; j: INTEGER): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_swap_elements (v.item, i, j)
		end

	gsl_vector_complex_long_double_equal (u: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_equal (u.item, v.item)
		end

	gsl_vector_complex_long_double_isnull (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_isnull (v.item)
		end

	gsl_vector_complex_long_double_ispos (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_ispos (v.item)
		end

	gsl_vector_complex_long_double_isneg (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_isneg (v.item)
		end

	gsl_vector_complex_long_double_isnonneg (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_isnonneg (v.item)
		end

	gsl_vector_complex_long_double_add (a: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; b: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_add (a.item, b.item)
		end

	gsl_vector_complex_long_double_sub (a: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; b: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_sub (a.item, b.item)
		end

	gsl_vector_complex_long_double_mul (a: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; b: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_mul (a.item, b.item)
		end

	gsl_vector_complex_long_double_div (a: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; b: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_div (a.item, b.item)
		end

	gsl_vector_complex_long_double_scale (a: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; x: GSL_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_scale (a.item, x.item)
		end

	gsl_vector_complex_long_double_add_constant (a: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; x: GSL_COMPLEX_LONG_DOUBLE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_vector_complex_long_double_add_constant (a.item, x.item)
		end

	gsl_vector_complex_long_double_get (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER): detachable GSL_COMPLEX_LONG_DOUBLE_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_get (v.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_set (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER; z: GSL_COMPLEX_LONG_DOUBLE_STRUCT_API) 
		do
			c_gsl_vector_complex_long_double_set (v.item, i, z.item)
		end

	gsl_vector_complex_long_double_ptr (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER): detachable GSL_COMPLEX_LONG_DOUBLE_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_ptr (v.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_vector_complex_long_double_const_ptr (v: GSL_VECTOR_COMPLEX_LONG_DOUBLE_STRUCT_API; i: INTEGER): detachable GSL_COMPLEX_LONG_DOUBLE_STRUCT_API 
		do
			if attached c_gsl_vector_complex_long_double_const_ptr (v.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

feature -- Externals

	c_gsl_vector_complex_long_double_alloc_from_block (b: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_alloc_from_block ((gsl_block_complex_long_double*)$b, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_complex_long_double_alloc_from_vector (v: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_alloc_from_vector ((gsl_vector_complex_long_double*)$v, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_complex_long_double_free (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_long_double_free ((gsl_vector_complex_long_double*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_view_array (base: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_view *result = (_gsl_vector_complex_long_double_view*) malloc (sizeof(_gsl_vector_complex_long_double_view));
				*result = gsl_vector_complex_long_double_view_array ((long double*)$base, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_view *result = (_gsl_vector_complex_long_double_view*) malloc (sizeof(_gsl_vector_complex_long_double_view));
				*result = gsl_vector_complex_long_double_view_array_with_stride ((long double*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_const_view_array (base: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_const_view *result = (_gsl_vector_complex_long_double_const_view*) malloc (sizeof(_gsl_vector_complex_long_double_const_view));
				*result = gsl_vector_complex_long_double_const_view_array ((long double const*)$base, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_const_view *result = (_gsl_vector_complex_long_double_const_view*) malloc (sizeof(_gsl_vector_complex_long_double_const_view));
				*result = gsl_vector_complex_long_double_const_view_array_with_stride ((long double const*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_subvector (base: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_view *result = (_gsl_vector_complex_long_double_view*) malloc (sizeof(_gsl_vector_complex_long_double_view));
				*result = gsl_vector_complex_long_double_subvector ((gsl_vector_complex_long_double*)$base, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_view *result = (_gsl_vector_complex_long_double_view*) malloc (sizeof(_gsl_vector_complex_long_double_view));
				*result = gsl_vector_complex_long_double_subvector_with_stride ((gsl_vector_complex_long_double*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_const_subvector (base: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_const_view *result = (_gsl_vector_complex_long_double_const_view*) malloc (sizeof(_gsl_vector_complex_long_double_const_view));
				*result = gsl_vector_complex_long_double_const_subvector ((gsl_vector_complex_long_double const*)$base, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_const_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_long_double_const_view *result = (_gsl_vector_complex_long_double_const_view*) malloc (sizeof(_gsl_vector_complex_long_double_const_view));
				*result = gsl_vector_complex_long_double_const_subvector_with_stride ((gsl_vector_complex_long_double const*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_real (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_long_double_view *result = (_gsl_vector_long_double_view*) malloc (sizeof(_gsl_vector_long_double_view));
				*result = gsl_vector_complex_long_double_real ((gsl_vector_complex_long_double*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_imag (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_long_double_view *result = (_gsl_vector_long_double_view*) malloc (sizeof(_gsl_vector_long_double_view));
				*result = gsl_vector_complex_long_double_imag ((gsl_vector_complex_long_double*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_const_real (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_long_double_const_view *result = (_gsl_vector_long_double_const_view*) malloc (sizeof(_gsl_vector_long_double_const_view));
				*result = gsl_vector_complex_long_double_const_real ((gsl_vector_complex_long_double const*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_const_imag (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_long_double_const_view *result = (_gsl_vector_long_double_const_view*) malloc (sizeof(_gsl_vector_long_double_const_view));
				*result = gsl_vector_complex_long_double_const_imag ((gsl_vector_complex_long_double const*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_set_zero (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_long_double_set_zero ((gsl_vector_complex_long_double*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_set_all (v: POINTER; z: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_long_double_set_all ((gsl_vector_complex_long_double*)$v, *(gsl_complex_long_double*)$z);
			]"
		end

	c_gsl_vector_complex_long_double_set_basis (v: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_set_basis ((gsl_vector_complex_long_double*)$v, (size_t)$i);
			]"
		end

	c_gsl_vector_complex_long_double_fread (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_fread ((FILE*)$stream, (gsl_vector_complex_long_double*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_fwrite (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_fwrite ((FILE*)$stream, (gsl_vector_complex_long_double const*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_fscanf (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_fscanf ((FILE*)$stream, (gsl_vector_complex_long_double*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_fprintf (stream: POINTER; v: POINTER; format: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_fprintf ((FILE*)$stream, (gsl_vector_complex_long_double const*)$v, (char const*)$format);
			]"
		end

	c_gsl_vector_complex_long_double_memcpy (dest: POINTER; src: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_memcpy ((gsl_vector_complex_long_double*)$dest, (gsl_vector_complex_long_double const*)$src);
			]"
		end

	c_gsl_vector_complex_long_double_reverse (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_reverse ((gsl_vector_complex_long_double*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_swap (v: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_swap ((gsl_vector_complex_long_double*)$v, (gsl_vector_complex_long_double*)$w);
			]"
		end

	c_gsl_vector_complex_long_double_swap_elements (v: POINTER; i: INTEGER; j: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_swap_elements ((gsl_vector_complex_long_double*)$v, (size_t const)$i, (size_t const)$j);
			]"
		end

	c_gsl_vector_complex_long_double_equal (u: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_equal ((gsl_vector_complex_long_double const*)$u, (gsl_vector_complex_long_double const*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_isnull (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_isnull ((gsl_vector_complex_long_double const*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_ispos (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_ispos ((gsl_vector_complex_long_double const*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_isneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_isneg ((gsl_vector_complex_long_double const*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_isnonneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_isnonneg ((gsl_vector_complex_long_double const*)$v);
			]"
		end

	c_gsl_vector_complex_long_double_add (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_add ((gsl_vector_complex_long_double*)$a, (gsl_vector_complex_long_double const*)$b);
			]"
		end

	c_gsl_vector_complex_long_double_sub (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_sub ((gsl_vector_complex_long_double*)$a, (gsl_vector_complex_long_double const*)$b);
			]"
		end

	c_gsl_vector_complex_long_double_mul (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_mul ((gsl_vector_complex_long_double*)$a, (gsl_vector_complex_long_double const*)$b);
			]"
		end

	c_gsl_vector_complex_long_double_div (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_div ((gsl_vector_complex_long_double*)$a, (gsl_vector_complex_long_double const*)$b);
			]"
		end

	c_gsl_vector_complex_long_double_scale (a: POINTER; x: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_scale ((gsl_vector_complex_long_double*)$a, *(gsl_complex_long_double const*)$x);
			]"
		end

	c_gsl_vector_complex_long_double_add_constant (a: POINTER; x: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_add_constant ((gsl_vector_complex_long_double*)$a, *(gsl_complex_long_double const*)$x);
			]"
		end

	c_gsl_vector_complex_long_double_get (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				gsl_complex_long_double *result = (gsl_complex_long_double*) malloc (sizeof(gsl_complex_long_double));
				*result = gsl_vector_complex_long_double_get ((gsl_vector_complex_long_double const*)$v, (size_t const)$i);
				return result;
			]"
		end

	c_gsl_vector_complex_long_double_set (v: POINTER; i: INTEGER; z: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_long_double_set ((gsl_vector_complex_long_double*)$v, (size_t const)$i, *(gsl_complex_long_double*)$z);
			]"
		end

	c_gsl_vector_complex_long_double_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_ptr ((gsl_vector_complex_long_double*)$v, (size_t const)$i);
			]"
		end

	c_gsl_vector_complex_long_double_const_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_long_double_const_ptr ((gsl_vector_complex_long_double const*)$v, (size_t const)$i);
			]"
		end

feature -- Externals Address

end
