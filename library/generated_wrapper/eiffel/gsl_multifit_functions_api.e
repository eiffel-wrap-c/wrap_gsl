note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GSL_MULTIFIT_FUNCTIONS_API


feature -- Access

	gsl_multifit_linear_alloc (n: INTEGER; p: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_alloc ((size_t const)$n, (size_t const)$p);
			]"
		end

	gsl_multifit_linear_free (w: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API) 
		do
			c_gsl_multifit_linear_free (w.item)
		end

	gsl_multifit_linear (x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; chisq: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear (x.item, y.item, c.item, cov.item, chisq, work.item)
		end

	gsl_multifit_linear_tsvd (x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; tol: REAL_64; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; chisq: POINTER; rank: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_tsvd (x.item, y.item, tol, c.item, cov.item, chisq, rank, work.item)
		end

	gsl_multifit_linear_svd (x: GSL_MATRIX_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_svd (x.item, work.item)
		end

	gsl_multifit_linear_bsvd (x: GSL_MATRIX_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_bsvd (x.item, work.item)
		end

	gsl_multifit_linear_rank (tol: REAL_64; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_rank (tol, work.item)
		end

	gsl_multifit_linear_solve (lambda: REAL_64; x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; rnorm: POINTER; snorm: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_solve (lambda, x.item, y.item, c.item, rnorm, snorm, work.item)
		end

	gsl_multifit_linear_apply_w (x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; wx: GSL_MATRIX_STRUCT_API; wy: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_apply_w (x.item, w.item, y.item, wx.item, wy.item)
		end

	gsl_multifit_linear_stdform1 (l: GSL_VECTOR_STRUCT_API; x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; xs: GSL_MATRIX_STRUCT_API; ys: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_stdform1 (l.item, x.item, y.item, xs.item, ys.item, work.item)
		end

	gsl_multifit_linear_wstdform1 (l: GSL_VECTOR_STRUCT_API; x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; xs: GSL_MATRIX_STRUCT_API; ys: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_wstdform1 (l.item, x.item, w.item, y.item, xs.item, ys.item, work.item)
		end

	gsl_multifit_linear_l_decomp (l: GSL_MATRIX_STRUCT_API; tau: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_l_decomp (l.item, tau.item)
		end

	gsl_multifit_linear_stdform2 (lqr: GSL_MATRIX_STRUCT_API; ltau: GSL_VECTOR_STRUCT_API; x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; xs: GSL_MATRIX_STRUCT_API; ys: GSL_VECTOR_STRUCT_API; m: GSL_MATRIX_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_stdform2 (lqr.item, ltau.item, x.item, y.item, xs.item, ys.item, m.item, work.item)
		end

	gsl_multifit_linear_wstdform2 (lqr: GSL_MATRIX_STRUCT_API; ltau: GSL_VECTOR_STRUCT_API; x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; xs: GSL_MATRIX_STRUCT_API; ys: GSL_VECTOR_STRUCT_API; m: GSL_MATRIX_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_wstdform2 (lqr.item, ltau.item, x.item, w.item, y.item, xs.item, ys.item, m.item, work.item)
		end

	gsl_multifit_linear_genform1 (l: GSL_VECTOR_STRUCT_API; cs: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_genform1 (l.item, cs.item, c.item, work.item)
		end

	gsl_multifit_linear_genform2 (lqr: GSL_MATRIX_STRUCT_API; ltau: GSL_VECTOR_STRUCT_API; x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; cs: GSL_VECTOR_STRUCT_API; m: GSL_MATRIX_STRUCT_API; c: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_genform2 (lqr.item, ltau.item, x.item, y.item, cs.item, m.item, c.item, work.item)
		end

	gsl_multifit_linear_wgenform2 (lqr: GSL_MATRIX_STRUCT_API; ltau: GSL_VECTOR_STRUCT_API; x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; cs: GSL_VECTOR_STRUCT_API; m: GSL_MATRIX_STRUCT_API; c: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_wgenform2 (lqr.item, ltau.item, x.item, w.item, y.item, cs.item, m.item, c.item, work.item)
		end

	gsl_multifit_linear_lreg (smin: REAL_64; smax: REAL_64; reg_param: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_lreg (smin, smax, reg_param.item)
		end

	gsl_multifit_linear_lcurve (y: GSL_VECTOR_STRUCT_API; reg_param: GSL_VECTOR_STRUCT_API; rho: GSL_VECTOR_STRUCT_API; eta: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_lcurve (y.item, reg_param.item, rho.item, eta.item, work.item)
		end

	gsl_multifit_linear_lcorner (rho: GSL_VECTOR_STRUCT_API; eta: GSL_VECTOR_STRUCT_API; idx: POINTER): INTEGER 
		do
			Result := c_gsl_multifit_linear_lcorner (rho.item, eta.item, idx)
		end

	gsl_multifit_linear_lcorner2 (reg_param: GSL_VECTOR_STRUCT_API; eta: GSL_VECTOR_STRUCT_API; idx: POINTER): INTEGER 
		do
			Result := c_gsl_multifit_linear_lcorner2 (reg_param.item, eta.item, idx)
		end

	gsl_multifit_linear_lk (p: INTEGER; k: INTEGER; l: GSL_MATRIX_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_lk (p, k, l.item)
		end

	gsl_multifit_linear_lsobolev (p: INTEGER; kmax: INTEGER; alpha: GSL_VECTOR_STRUCT_API; l: GSL_MATRIX_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_lsobolev (p, kmax, alpha.item, l.item, work.item)
		end

	gsl_multifit_wlinear (x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; chisq: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_wlinear (x.item, w.item, y.item, c.item, cov.item, chisq, work.item)
		end

	gsl_multifit_wlinear_tsvd (x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; tol: REAL_64; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; chisq: POINTER; rank: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_wlinear_tsvd (x.item, w.item, y.item, tol, c.item, cov.item, chisq, rank, work.item)
		end

	gsl_multifit_wlinear_svd (x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; tol: REAL_64; rank: POINTER; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; chisq: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_wlinear_svd (x.item, w.item, y.item, tol, rank, c.item, cov.item, chisq, work.item)
		end

	gsl_multifit_wlinear_usvd (x: GSL_MATRIX_STRUCT_API; w: GSL_VECTOR_STRUCT_API; y: GSL_VECTOR_STRUCT_API; tol: REAL_64; rank: POINTER; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; chisq: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_wlinear_usvd (x.item, w.item, y.item, tol, rank, c.item, cov.item, chisq, work.item)
		end

	gsl_multifit_linear_est (x: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; y: POINTER; y_err: POINTER): INTEGER 
		do
			Result := c_gsl_multifit_linear_est (x.item, c.item, cov.item, y, y_err)
		end

	gsl_multifit_linear_rcond (w: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): REAL_64 
		do
			Result := c_gsl_multifit_linear_rcond (w.item)
		end

	gsl_multifit_linear_residuals (x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; r: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_residuals (x.item, y.item, c.item, r.item)
		end

	gsl_multifit_linear_gcv_init (y: GSL_VECTOR_STRUCT_API; reg_param: GSL_VECTOR_STRUCT_API; uty: GSL_VECTOR_STRUCT_API; delta0: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_gcv_init (y.item, reg_param.item, uty.item, delta0, work.item)
		end

	gsl_multifit_linear_gcv_curve (reg_param: GSL_VECTOR_STRUCT_API; uty: GSL_VECTOR_STRUCT_API; delta0: REAL_64; g: GSL_VECTOR_STRUCT_API; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_gcv_curve (reg_param.item, uty.item, delta0, g.item, work.item)
		end

	gsl_multifit_linear_gcv_min (reg_param: GSL_VECTOR_STRUCT_API; uty: GSL_VECTOR_STRUCT_API; g: GSL_VECTOR_STRUCT_API; delta0: REAL_64; lambda: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_gcv_min (reg_param.item, uty.item, g.item, delta0, lambda, work.item)
		end

	gsl_multifit_linear_gcv_calc (lambda: REAL_64; uty: GSL_VECTOR_STRUCT_API; delta0: REAL_64; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): REAL_64 
		do
			Result := c_gsl_multifit_linear_gcv_calc (lambda, uty.item, delta0, work.item)
		end

	gsl_multifit_linear_gcv (y: GSL_VECTOR_STRUCT_API; reg_param: GSL_VECTOR_STRUCT_API; g: GSL_VECTOR_STRUCT_API; lambda: POINTER; g_lambda: POINTER; work: GSL_MULTIFIT_LINEAR_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_linear_gcv (y.item, reg_param.item, g.item, lambda, g_lambda, work.item)
		end

	gsl_multifit_robust_alloc (t: GSL_MULTIFIT_ROBUST_TYPE_STRUCT_API; n: INTEGER; p: INTEGER): detachable GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API 
		do
			if attached c_gsl_multifit_robust_alloc (t.item, n, p) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_multifit_robust_free (w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API) 
		do
			c_gsl_multifit_robust_free (w.item)
		end

	gsl_multifit_robust_tune (tune: REAL_64; w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_robust_tune (tune, w.item)
		end

	gsl_multifit_robust_maxiter (maxiter: INTEGER; w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_robust_maxiter (maxiter, w.item)
		end

	gsl_multifit_robust_name (w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): POINTER 
		do
			Result := c_gsl_multifit_robust_name (w.item)
		end

	gsl_multifit_robust_statistics (w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): detachable GSL_MULTIFIT_ROBUST_STATS_STRUCT_API 
		do
			if attached c_gsl_multifit_robust_statistics (w.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_multifit_robust_weights (r: GSL_VECTOR_STRUCT_API; wts: GSL_VECTOR_STRUCT_API; w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_robust_weights (r.item, wts.item, w.item)
		end

	gsl_multifit_robust (x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_robust (x.item, y.item, c.item, cov.item, w.item)
		end

	gsl_multifit_robust_est (x: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; cov: GSL_MATRIX_STRUCT_API; y: POINTER; y_err: POINTER): INTEGER 
		do
			Result := c_gsl_multifit_robust_est (x.item, c.item, cov.item, y, y_err)
		end

	gsl_multifit_robust_residuals (x: GSL_MATRIX_STRUCT_API; y: GSL_VECTOR_STRUCT_API; c: GSL_VECTOR_STRUCT_API; r: GSL_VECTOR_STRUCT_API; w: GSL_MULTIFIT_ROBUST_WORKSPACE_STRUCT_API): INTEGER 
		do
			Result := c_gsl_multifit_robust_residuals (x.item, y.item, c.item, r.item, w.item)
		end

feature -- Externals

	c_gsl_multifit_linear_free (w: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_multifit_linear_free ((gsl_multifit_linear_workspace*)$w);
			]"
		end

	c_gsl_multifit_linear (x: POINTER; y: POINTER; c: POINTER; cov: POINTER; chisq: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear ((gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_vector*)$c, (gsl_matrix*)$cov, (double*)$chisq, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_tsvd (x: POINTER; y: POINTER; tol: REAL_64; c: POINTER; cov: POINTER; chisq: POINTER; rank: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_tsvd ((gsl_matrix const*)$x, (gsl_vector const*)$y, (double const)$tol, (gsl_vector*)$c, (gsl_matrix*)$cov, (double*)$chisq, (size_t*)$rank, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_svd (x: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_svd ((gsl_matrix const*)$x, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_bsvd (x: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_bsvd ((gsl_matrix const*)$x, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_rank (tol: REAL_64; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_rank ((double const)$tol, (gsl_multifit_linear_workspace const*)$work);
			]"
		end

	c_gsl_multifit_linear_solve (lambda: REAL_64; x: POINTER; y: POINTER; c: POINTER; rnorm: POINTER; snorm: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_solve ((double const)$lambda, (gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_vector*)$c, (double*)$rnorm, (double*)$snorm, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_apply_w (x: POINTER; w: POINTER; y: POINTER; wx: POINTER; wy: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_applyW ((gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (gsl_matrix*)$wx, (gsl_vector*)$wy);
			]"
		end

	c_gsl_multifit_linear_stdform1 (l: POINTER; x: POINTER; y: POINTER; xs: POINTER; ys: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_stdform1 ((gsl_vector const*)$l, (gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_matrix*)$xs, (gsl_vector*)$ys, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_wstdform1 (l: POINTER; x: POINTER; w: POINTER; y: POINTER; xs: POINTER; ys: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_wstdform1 ((gsl_vector const*)$l, (gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (gsl_matrix*)$xs, (gsl_vector*)$ys, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_l_decomp (l: POINTER; tau: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_L_decomp ((gsl_matrix*)$l, (gsl_vector*)$tau);
			]"
		end

	c_gsl_multifit_linear_stdform2 (lqr: POINTER; ltau: POINTER; x: POINTER; y: POINTER; xs: POINTER; ys: POINTER; m: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_stdform2 ((gsl_matrix const*)$lqr, (gsl_vector const*)$ltau, (gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_matrix*)$xs, (gsl_vector*)$ys, (gsl_matrix*)$m, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_wstdform2 (lqr: POINTER; ltau: POINTER; x: POINTER; w: POINTER; y: POINTER; xs: POINTER; ys: POINTER; m: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_wstdform2 ((gsl_matrix const*)$lqr, (gsl_vector const*)$ltau, (gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (gsl_matrix*)$xs, (gsl_vector*)$ys, (gsl_matrix*)$m, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_genform1 (l: POINTER; cs: POINTER; c: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_genform1 ((gsl_vector const*)$l, (gsl_vector const*)$cs, (gsl_vector*)$c, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_genform2 (lqr: POINTER; ltau: POINTER; x: POINTER; y: POINTER; cs: POINTER; m: POINTER; c: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_genform2 ((gsl_matrix const*)$lqr, (gsl_vector const*)$ltau, (gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_vector const*)$cs, (gsl_matrix const*)$m, (gsl_vector*)$c, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_wgenform2 (lqr: POINTER; ltau: POINTER; x: POINTER; w: POINTER; y: POINTER; cs: POINTER; m: POINTER; c: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_wgenform2 ((gsl_matrix const*)$lqr, (gsl_vector const*)$ltau, (gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (gsl_vector const*)$cs, (gsl_matrix const*)$m, (gsl_vector*)$c, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_lreg (smin: REAL_64; smax: REAL_64; reg_param: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_lreg ((double const)$smin, (double const)$smax, (gsl_vector*)$reg_param);
			]"
		end

	c_gsl_multifit_linear_lcurve (y: POINTER; reg_param: POINTER; rho: POINTER; eta: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_lcurve ((gsl_vector const*)$y, (gsl_vector*)$reg_param, (gsl_vector*)$rho, (gsl_vector*)$eta, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_lcorner (rho: POINTER; eta: POINTER; idx: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_lcorner ((gsl_vector const*)$rho, (gsl_vector const*)$eta, (size_t*)$idx);
			]"
		end

	c_gsl_multifit_linear_lcorner2 (reg_param: POINTER; eta: POINTER; idx: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_lcorner2 ((gsl_vector const*)$reg_param, (gsl_vector const*)$eta, (size_t*)$idx);
			]"
		end

	c_gsl_multifit_linear_lk (p: INTEGER; k: INTEGER; l: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_Lk ((size_t const)$p, (size_t const)$k, (gsl_matrix*)$l);
			]"
		end

	c_gsl_multifit_linear_lsobolev (p: INTEGER; kmax: INTEGER; alpha: POINTER; l: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_Lsobolev ((size_t const)$p, (size_t const)$kmax, (gsl_vector const*)$alpha, (gsl_matrix*)$l, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_wlinear (x: POINTER; w: POINTER; y: POINTER; c: POINTER; cov: POINTER; chisq: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_wlinear ((gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (gsl_vector*)$c, (gsl_matrix*)$cov, (double*)$chisq, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_wlinear_tsvd (x: POINTER; w: POINTER; y: POINTER; tol: REAL_64; c: POINTER; cov: POINTER; chisq: POINTER; rank: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_wlinear_tsvd ((gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (double const)$tol, (gsl_vector*)$c, (gsl_matrix*)$cov, (double*)$chisq, (size_t*)$rank, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_wlinear_svd (x: POINTER; w: POINTER; y: POINTER; tol: REAL_64; rank: POINTER; c: POINTER; cov: POINTER; chisq: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_wlinear_svd ((gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (double)$tol, (size_t*)$rank, (gsl_vector*)$c, (gsl_matrix*)$cov, (double*)$chisq, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_wlinear_usvd (x: POINTER; w: POINTER; y: POINTER; tol: REAL_64; rank: POINTER; c: POINTER; cov: POINTER; chisq: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_wlinear_usvd ((gsl_matrix const*)$x, (gsl_vector const*)$w, (gsl_vector const*)$y, (double)$tol, (size_t*)$rank, (gsl_vector*)$c, (gsl_matrix*)$cov, (double*)$chisq, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_est (x: POINTER; c: POINTER; cov: POINTER; y: POINTER; y_err: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_est ((gsl_vector const*)$x, (gsl_vector const*)$c, (gsl_matrix const*)$cov, (double*)$y, (double*)$y_err);
			]"
		end

	c_gsl_multifit_linear_rcond (w: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_rcond ((gsl_multifit_linear_workspace const*)$w);
			]"
		end

	c_gsl_multifit_linear_residuals (x: POINTER; y: POINTER; c: POINTER; r: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_residuals ((gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_vector const*)$c, (gsl_vector*)$r);
			]"
		end

	c_gsl_multifit_linear_gcv_init (y: POINTER; reg_param: POINTER; uty: POINTER; delta0: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_gcv_init ((gsl_vector const*)$y, (gsl_vector*)$reg_param, (gsl_vector*)$uty, (double*)$delta0, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_gcv_curve (reg_param: POINTER; uty: POINTER; delta0: REAL_64; g: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_gcv_curve ((gsl_vector const*)$reg_param, (gsl_vector const*)$uty, (double const)$delta0, (gsl_vector*)$g, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_gcv_min (reg_param: POINTER; uty: POINTER; g: POINTER; delta0: REAL_64; lambda: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_gcv_min ((gsl_vector const*)$reg_param, (gsl_vector const*)$uty, (gsl_vector const*)$g, (double const)$delta0, (double*)$lambda, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_gcv_calc (lambda: REAL_64; uty: POINTER; delta0: REAL_64; work: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_gcv_calc ((double const)$lambda, (gsl_vector const*)$uty, (double const)$delta0, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_linear_gcv (y: POINTER; reg_param: POINTER; g: POINTER; lambda: POINTER; g_lambda: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_linear_gcv ((gsl_vector const*)$y, (gsl_vector*)$reg_param, (gsl_vector*)$g, (double*)$lambda, (double*)$g_lambda, (gsl_multifit_linear_workspace*)$work);
			]"
		end

	c_gsl_multifit_robust_alloc (t: POINTER; n: INTEGER; p: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_alloc ((gsl_multifit_robust_type const*)$t, (size_t const)$n, (size_t const)$p);
			]"
		end

	c_gsl_multifit_robust_free (w: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_multifit_robust_free ((gsl_multifit_robust_workspace*)$w);
			]"
		end

	c_gsl_multifit_robust_tune (tune: REAL_64; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_tune ((double const)$tune, (gsl_multifit_robust_workspace*)$w);
			]"
		end

	c_gsl_multifit_robust_maxiter (maxiter: INTEGER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_maxiter ((size_t const)$maxiter, (gsl_multifit_robust_workspace*)$w);
			]"
		end

	c_gsl_multifit_robust_name (w: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_name ((gsl_multifit_robust_workspace const*)$w);
			]"
		end

	c_gsl_multifit_robust_statistics (w: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				gsl_multifit_robust_stats *result = (gsl_multifit_robust_stats*) malloc (sizeof(gsl_multifit_robust_stats));
				*result = gsl_multifit_robust_statistics ((gsl_multifit_robust_workspace const*)$w);
				return result;
			]"
		end

	c_gsl_multifit_robust_weights (r: POINTER; wts: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_weights ((gsl_vector const*)$r, (gsl_vector*)$wts, (gsl_multifit_robust_workspace*)$w);
			]"
		end

	c_gsl_multifit_robust (x: POINTER; y: POINTER; c: POINTER; cov: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust ((gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_vector*)$c, (gsl_matrix*)$cov, (gsl_multifit_robust_workspace*)$w);
			]"
		end

	c_gsl_multifit_robust_est (x: POINTER; c: POINTER; cov: POINTER; y: POINTER; y_err: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_est ((gsl_vector const*)$x, (gsl_vector const*)$c, (gsl_matrix const*)$cov, (double*)$y, (double*)$y_err);
			]"
		end

	c_gsl_multifit_robust_residuals (x: POINTER; y: POINTER; c: POINTER; r: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_multifit_robust_residuals ((gsl_matrix const*)$x, (gsl_vector const*)$y, (gsl_vector const*)$c, (gsl_vector*)$r, (gsl_multifit_robust_workspace*)$w);
			]"
		end

feature -- Externals Address

end
