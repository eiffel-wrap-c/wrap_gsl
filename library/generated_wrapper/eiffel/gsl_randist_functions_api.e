note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GSL_RANDIST_FUNCTIONS_API


feature -- Access

	gsl_ran_bernoulli (r: GSL_RNG_STRUCT_API; p: REAL_64): INTEGER 
		do
			Result := c_gsl_ran_bernoulli (r.item, p)
		end

	gsl_ran_bernoulli_pdf (k: INTEGER; p: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_bernoulli_pdf ((unsigned int const)$k, (double)$p);
			]"
		end

	gsl_ran_beta (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_beta (r.item, a, b)
		end

	gsl_ran_beta_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_beta_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_binomial (r: GSL_RNG_STRUCT_API; p: REAL_64; n: INTEGER): INTEGER 
		do
			Result := c_gsl_ran_binomial (r.item, p, n)
		end

	gsl_ran_binomial_knuth (r: GSL_RNG_STRUCT_API; p: REAL_64; n: INTEGER): INTEGER 
		do
			Result := c_gsl_ran_binomial_knuth (r.item, p, n)
		end

	gsl_ran_binomial_tpe (r: GSL_RNG_STRUCT_API; p: REAL_64; n: INTEGER): INTEGER 
		do
			Result := c_gsl_ran_binomial_tpe (r.item, p, n)
		end

	gsl_ran_binomial_pdf (k: INTEGER; p: REAL_64; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_binomial_pdf ((unsigned int const)$k, (double const)$p, (unsigned int const)$n);
			]"
		end

	gsl_ran_exponential (r: GSL_RNG_STRUCT_API; mu: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_exponential (r.item, mu)
		end

	gsl_ran_exponential_pdf (x: REAL_64; mu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_exponential_pdf ((double const)$x, (double const)$mu);
			]"
		end

	gsl_ran_exppow (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_exppow (r.item, a, b)
		end

	gsl_ran_exppow_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_exppow_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_cauchy (r: GSL_RNG_STRUCT_API; a: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_cauchy (r.item, a)
		end

	gsl_ran_cauchy_pdf (x: REAL_64; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_cauchy_pdf ((double const)$x, (double const)$a);
			]"
		end

	gsl_ran_chisq (r: GSL_RNG_STRUCT_API; nu: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_chisq (r.item, nu)
		end

	gsl_ran_chisq_pdf (x: REAL_64; nu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_chisq_pdf ((double const)$x, (double const)$nu);
			]"
		end

	gsl_ran_dirichlet (r: GSL_RNG_STRUCT_API; k: INTEGER; alpha: MANAGED_POINTER; theta: MANAGED_POINTER) 
		do
			c_gsl_ran_dirichlet (r.item, k, alpha.item, theta.item)
		end

	gsl_ran_dirichlet_pdf (k: INTEGER; alpha: MANAGED_POINTER; theta: MANAGED_POINTER): REAL_64 
		do
			Result := c_gsl_ran_dirichlet_pdf (k, alpha.item, theta.item)
		end

	gsl_ran_dirichlet_lnpdf (k: INTEGER; alpha: MANAGED_POINTER; theta: MANAGED_POINTER): REAL_64 
		do
			Result := c_gsl_ran_dirichlet_lnpdf (k, alpha.item, theta.item)
		end

	gsl_ran_erlang (r: GSL_RNG_STRUCT_API; a: REAL_64; n: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_erlang (r.item, a, n)
		end

	gsl_ran_erlang_pdf (x: REAL_64; a: REAL_64; n: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_erlang_pdf ((double const)$x, (double const)$a, (double const)$n);
			]"
		end

	gsl_ran_fdist (r: GSL_RNG_STRUCT_API; nu1: REAL_64; nu2: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_fdist (r.item, nu1, nu2)
		end

	gsl_ran_fdist_pdf (x: REAL_64; nu1: REAL_64; nu2: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_fdist_pdf ((double const)$x, (double const)$nu1, (double const)$nu2);
			]"
		end

	gsl_ran_flat (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_flat (r.item, a, b)
		end

	gsl_ran_flat_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_flat_pdf ((double)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_gamma (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gamma (r.item, a, b)
		end

	gsl_ran_gamma_int (r: GSL_RNG_STRUCT_API; a: INTEGER): REAL_64 
		do
			Result := c_gsl_ran_gamma_int (r.item, a)
		end

	gsl_ran_gamma_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gamma_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_gamma_mt (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gamma_mt (r.item, a, b)
		end

	gsl_ran_gamma_knuth (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gamma_knuth (r.item, a, b)
		end

	gsl_ran_gaussian (r: GSL_RNG_STRUCT_API; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gaussian (r.item, sigma)
		end

	gsl_ran_gaussian_ratio_method (r: GSL_RNG_STRUCT_API; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gaussian_ratio_method (r.item, sigma)
		end

	gsl_ran_gaussian_ziggurat (r: GSL_RNG_STRUCT_API; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gaussian_ziggurat (r.item, sigma)
		end

	gsl_ran_gaussian_pdf (x: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gaussian_pdf ((double const)$x, (double const)$sigma);
			]"
		end

	gsl_ran_ugaussian (r: GSL_RNG_STRUCT_API): REAL_64 
		do
			Result := c_gsl_ran_ugaussian (r.item)
		end

	gsl_ran_ugaussian_ratio_method (r: GSL_RNG_STRUCT_API): REAL_64 
		do
			Result := c_gsl_ran_ugaussian_ratio_method (r.item)
		end

	gsl_ran_ugaussian_pdf (x: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_ugaussian_pdf ((double const)$x);
			]"
		end

	gsl_ran_gaussian_tail (r: GSL_RNG_STRUCT_API; a: REAL_64; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gaussian_tail (r.item, a, sigma)
		end

	gsl_ran_gaussian_tail_pdf (x: REAL_64; a: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gaussian_tail_pdf ((double const)$x, (double const)$a, (double const)$sigma);
			]"
		end

	gsl_ran_ugaussian_tail (r: GSL_RNG_STRUCT_API; a: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_ugaussian_tail (r.item, a)
		end

	gsl_ran_ugaussian_tail_pdf (x: REAL_64; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_ugaussian_tail_pdf ((double const)$x, (double const)$a);
			]"
		end

	gsl_ran_bivariate_gaussian (r: GSL_RNG_STRUCT_API; sigma_x: REAL_64; sigma_y: REAL_64; rho: REAL_64; x: POINTER; y: POINTER) 
		do
			c_gsl_ran_bivariate_gaussian (r.item, sigma_x, sigma_y, rho, x, y)
		end

	gsl_ran_bivariate_gaussian_pdf (x: REAL_64; y: REAL_64; sigma_x: REAL_64; sigma_y: REAL_64; rho: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_bivariate_gaussian_pdf ((double const)$x, (double const)$y, (double const)$sigma_x, (double const)$sigma_y, (double const)$rho);
			]"
		end

	gsl_ran_multivariate_gaussian (r: GSL_RNG_STRUCT_API; mu: GSL_VECTOR_STRUCT_API; l: GSL_MATRIX_STRUCT_API; a_result: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_multivariate_gaussian (r.item, mu.item, l.item, a_result.item)
		end

	gsl_ran_multivariate_gaussian_log_pdf (x: GSL_VECTOR_STRUCT_API; mu: GSL_VECTOR_STRUCT_API; l: GSL_MATRIX_STRUCT_API; a_result: POINTER; work: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_multivariate_gaussian_log_pdf (x.item, mu.item, l.item, a_result, work.item)
		end

	gsl_ran_multivariate_gaussian_pdf (x: GSL_VECTOR_STRUCT_API; mu: GSL_VECTOR_STRUCT_API; l: GSL_MATRIX_STRUCT_API; a_result: POINTER; work: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_multivariate_gaussian_pdf (x.item, mu.item, l.item, a_result, work.item)
		end

	gsl_ran_multivariate_gaussian_mean (x: GSL_MATRIX_STRUCT_API; mu_hat: GSL_VECTOR_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_multivariate_gaussian_mean (x.item, mu_hat.item)
		end

	gsl_ran_multivariate_gaussian_vcov (x: GSL_MATRIX_STRUCT_API; sigma_hat: GSL_MATRIX_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_multivariate_gaussian_vcov (x.item, sigma_hat.item)
		end

	gsl_ran_wishart (r: GSL_RNG_STRUCT_API; df: REAL_64; l: GSL_MATRIX_STRUCT_API; a_result: GSL_MATRIX_STRUCT_API; work: GSL_MATRIX_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_wishart (r.item, df, l.item, a_result.item, work.item)
		end

	gsl_ran_wishart_log_pdf (x: GSL_MATRIX_STRUCT_API; l_x: GSL_MATRIX_STRUCT_API; df: REAL_64; l: GSL_MATRIX_STRUCT_API; a_result: POINTER; work: GSL_MATRIX_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_wishart_log_pdf (x.item, l_x.item, df, l.item, a_result, work.item)
		end

	gsl_ran_wishart_pdf (x: GSL_MATRIX_STRUCT_API; l_x: GSL_MATRIX_STRUCT_API; df: REAL_64; l: GSL_MATRIX_STRUCT_API; a_result: POINTER; work: GSL_MATRIX_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_wishart_pdf (x.item, l_x.item, df, l.item, a_result, work.item)
		end

	gsl_ran_landau (r: GSL_RNG_STRUCT_API): REAL_64 
		do
			Result := c_gsl_ran_landau (r.item)
		end

	gsl_ran_landau_pdf (x: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_landau_pdf ((double const)$x);
			]"
		end

	gsl_ran_geometric (r: GSL_RNG_STRUCT_API; p: REAL_64): INTEGER 
		do
			Result := c_gsl_ran_geometric (r.item, p)
		end

	gsl_ran_geometric_pdf (k: INTEGER; p: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_geometric_pdf ((unsigned int const)$k, (double const)$p);
			]"
		end

	gsl_ran_hypergeometric (r: GSL_RNG_STRUCT_API; n1: INTEGER; n2: INTEGER; t: INTEGER): INTEGER 
		do
			Result := c_gsl_ran_hypergeometric (r.item, n1, n2, t)
		end

	gsl_ran_hypergeometric_pdf (k: INTEGER; n1: INTEGER; n2: INTEGER; t: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_hypergeometric_pdf ((unsigned int const)$k, (unsigned int const)$n1, (unsigned int const)$n2, (unsigned int)$t);
			]"
		end

	gsl_ran_gumbel1 (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gumbel1 (r.item, a, b)
		end

	gsl_ran_gumbel1_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gumbel1_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_gumbel2 (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_gumbel2 (r.item, a, b)
		end

	gsl_ran_gumbel2_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gumbel2_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_logistic (r: GSL_RNG_STRUCT_API; a: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_logistic (r.item, a)
		end

	gsl_ran_logistic_pdf (x: REAL_64; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_logistic_pdf ((double const)$x, (double const)$a);
			]"
		end

	gsl_ran_lognormal (r: GSL_RNG_STRUCT_API; zeta: REAL_64; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_lognormal (r.item, zeta, sigma)
		end

	gsl_ran_lognormal_pdf (x: REAL_64; zeta: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_lognormal_pdf ((double const)$x, (double const)$zeta, (double const)$sigma);
			]"
		end

	gsl_ran_logarithmic (r: GSL_RNG_STRUCT_API; p: REAL_64): INTEGER 
		do
			Result := c_gsl_ran_logarithmic (r.item, p)
		end

	gsl_ran_logarithmic_pdf (k: INTEGER; p: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_logarithmic_pdf ((unsigned int const)$k, (double const)$p);
			]"
		end

	gsl_ran_multinomial (r: GSL_RNG_STRUCT_API; k: INTEGER; n: INTEGER; p: MANAGED_POINTER; n_1: MANAGED_POINTER) 
		do
			c_gsl_ran_multinomial (r.item, k, n, p.item, n_1.item)
		end

	gsl_ran_multinomial_pdf (k: INTEGER; p: MANAGED_POINTER; n: MANAGED_POINTER): REAL_64 
		do
			Result := c_gsl_ran_multinomial_pdf (k, p.item, n.item)
		end

	gsl_ran_multinomial_lnpdf (k: INTEGER; p: MANAGED_POINTER; n: MANAGED_POINTER): REAL_64 
		do
			Result := c_gsl_ran_multinomial_lnpdf (k, p.item, n.item)
		end

	gsl_ran_negative_binomial (r: GSL_RNG_STRUCT_API; p: REAL_64; n: REAL_64): INTEGER 
		do
			Result := c_gsl_ran_negative_binomial (r.item, p, n)
		end

	gsl_ran_negative_binomial_pdf (k: INTEGER; p: REAL_64; n: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_negative_binomial_pdf ((unsigned int const)$k, (double const)$p, (double)$n);
			]"
		end

	gsl_ran_pascal (r: GSL_RNG_STRUCT_API; p: REAL_64; n: INTEGER): INTEGER 
		do
			Result := c_gsl_ran_pascal (r.item, p, n)
		end

	gsl_ran_pascal_pdf (k: INTEGER; p: REAL_64; n: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_pascal_pdf ((unsigned int const)$k, (double const)$p, (unsigned int)$n);
			]"
		end

	gsl_ran_pareto (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_pareto (r.item, a, b)
		end

	gsl_ran_pareto_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_pareto_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_poisson (r: GSL_RNG_STRUCT_API; mu: REAL_64): INTEGER 
		do
			Result := c_gsl_ran_poisson (r.item, mu)
		end

	gsl_ran_poisson_array (r: GSL_RNG_STRUCT_API; n: INTEGER; array: MANAGED_POINTER; mu: REAL_64) 
		do
			c_gsl_ran_poisson_array (r.item, n, array.item, mu)
		end

	gsl_ran_poisson_pdf (k: INTEGER; mu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_poisson_pdf ((unsigned int const)$k, (double const)$mu);
			]"
		end

	gsl_ran_rayleigh (r: GSL_RNG_STRUCT_API; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_rayleigh (r.item, sigma)
		end

	gsl_ran_rayleigh_pdf (x: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_rayleigh_pdf ((double const)$x, (double const)$sigma);
			]"
		end

	gsl_ran_rayleigh_tail (r: GSL_RNG_STRUCT_API; a: REAL_64; sigma: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_rayleigh_tail (r.item, a, sigma)
		end

	gsl_ran_rayleigh_tail_pdf (x: REAL_64; a: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_rayleigh_tail_pdf ((double const)$x, (double const)$a, (double const)$sigma);
			]"
		end

	gsl_ran_tdist (r: GSL_RNG_STRUCT_API; nu: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_tdist (r.item, nu)
		end

	gsl_ran_tdist_pdf (x: REAL_64; nu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_tdist_pdf ((double const)$x, (double const)$nu);
			]"
		end

	gsl_ran_laplace (r: GSL_RNG_STRUCT_API; a: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_laplace (r.item, a)
		end

	gsl_ran_laplace_pdf (x: REAL_64; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_laplace_pdf ((double const)$x, (double const)$a);
			]"
		end

	gsl_ran_levy (r: GSL_RNG_STRUCT_API; c: REAL_64; alpha: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_levy (r.item, c, alpha)
		end

	gsl_ran_levy_skew (r: GSL_RNG_STRUCT_API; c: REAL_64; alpha: REAL_64; beta: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_levy_skew (r.item, c, alpha, beta)
		end

	gsl_ran_weibull (r: GSL_RNG_STRUCT_API; a: REAL_64; b: REAL_64): REAL_64 
		do
			Result := c_gsl_ran_weibull (r.item, a, b)
		end

	gsl_ran_weibull_pdf (x: REAL_64; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_weibull_pdf ((double const)$x, (double const)$a, (double const)$b);
			]"
		end

	gsl_ran_dir_2d (r: GSL_RNG_STRUCT_API; x: POINTER; y: POINTER) 
		do
			c_gsl_ran_dir_2d (r.item, x, y)
		end

	gsl_ran_dir_2d_trig_method (r: GSL_RNG_STRUCT_API; x: POINTER; y: POINTER) 
		do
			c_gsl_ran_dir_2d_trig_method (r.item, x, y)
		end

	gsl_ran_dir_3d (r: GSL_RNG_STRUCT_API; x: POINTER; y: POINTER; z: POINTER) 
		do
			c_gsl_ran_dir_3d (r.item, x, y, z)
		end

	gsl_ran_dir_nd (r: GSL_RNG_STRUCT_API; n: INTEGER; x: POINTER) 
		do
			c_gsl_ran_dir_nd (r.item, n, x)
		end

	gsl_ran_shuffle (r: GSL_RNG_STRUCT_API; base: POINTER; nmembm: INTEGER; size: INTEGER) 
		do
			c_gsl_ran_shuffle (r.item, base, nmembm, size)
		end

	gsl_ran_choose (r: GSL_RNG_STRUCT_API; dest: POINTER; k: INTEGER; src: POINTER; n: INTEGER; size: INTEGER): INTEGER 
		do
			Result := c_gsl_ran_choose (r.item, dest, k, src, n, size)
		end

	gsl_ran_sample (r: GSL_RNG_STRUCT_API; dest: POINTER; k: INTEGER; src: POINTER; n: INTEGER; size: INTEGER) 
		do
			c_gsl_ran_sample (r.item, dest, k, src, n, size)
		end

	gsl_ran_discrete_preproc (k: INTEGER; p: POINTER): detachable GSL_RAN_DISCRETE_T_STRUCT_API 
		do
			if attached c_gsl_ran_discrete_preproc (k, p) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	gsl_ran_discrete_free (g: GSL_RAN_DISCRETE_T_STRUCT_API) 
		do
			c_gsl_ran_discrete_free (g.item)
		end

	gsl_ran_discrete (r: GSL_RNG_STRUCT_API; g: GSL_RAN_DISCRETE_T_STRUCT_API): INTEGER 
		do
			Result := c_gsl_ran_discrete (r.item, g.item)
		end

	gsl_ran_discrete_pdf (k: INTEGER; g: GSL_RAN_DISCRETE_T_STRUCT_API): REAL_64 
		do
			Result := c_gsl_ran_discrete_pdf (k, g.item)
		end

feature -- Externals

	c_gsl_ran_bernoulli (r: POINTER; p: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_bernoulli ((gsl_rng const*)$r, (double)$p);
			]"
		end

	c_gsl_ran_beta (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_beta ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_binomial (r: POINTER; p: REAL_64; n: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_binomial ((gsl_rng const*)$r, (double)$p, (unsigned int)$n);
			]"
		end

	c_gsl_ran_binomial_knuth (r: POINTER; p: REAL_64; n: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_binomial_knuth ((gsl_rng const*)$r, (double)$p, (unsigned int)$n);
			]"
		end

	c_gsl_ran_binomial_tpe (r: POINTER; p: REAL_64; n: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_binomial_tpe ((gsl_rng const*)$r, (double)$p, (unsigned int)$n);
			]"
		end

	c_gsl_ran_exponential (r: POINTER; mu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_exponential ((gsl_rng const*)$r, (double const)$mu);
			]"
		end

	c_gsl_ran_exppow (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_exppow ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_cauchy (r: POINTER; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_cauchy ((gsl_rng const*)$r, (double const)$a);
			]"
		end

	c_gsl_ran_chisq (r: POINTER; nu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_chisq ((gsl_rng const*)$r, (double const)$nu);
			]"
		end

	c_gsl_ran_dirichlet (r: POINTER; k: INTEGER; alpha: POINTER; theta: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_dirichlet ((gsl_rng const*)$r, (size_t const)$k, $alpha, $theta);
			]"
		end

	c_gsl_ran_dirichlet_pdf (k: INTEGER; alpha: POINTER; theta: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_dirichlet_pdf ((size_t const)$k, $alpha, $theta);
			]"
		end

	c_gsl_ran_dirichlet_lnpdf (k: INTEGER; alpha: POINTER; theta: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_dirichlet_lnpdf ((size_t const)$k, $alpha, $theta);
			]"
		end

	c_gsl_ran_erlang (r: POINTER; a: REAL_64; n: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_erlang ((gsl_rng const*)$r, (double const)$a, (double const)$n);
			]"
		end

	c_gsl_ran_fdist (r: POINTER; nu1: REAL_64; nu2: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_fdist ((gsl_rng const*)$r, (double const)$nu1, (double const)$nu2);
			]"
		end

	c_gsl_ran_flat (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_flat ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_gamma (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gamma ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_gamma_int (r: POINTER; a: INTEGER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gamma_int ((gsl_rng const*)$r, (unsigned int const)$a);
			]"
		end

	c_gsl_ran_gamma_mt (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gamma_mt ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_gamma_knuth (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gamma_knuth ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_gaussian (r: POINTER; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gaussian ((gsl_rng const*)$r, (double const)$sigma);
			]"
		end

	c_gsl_ran_gaussian_ratio_method (r: POINTER; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gaussian_ratio_method ((gsl_rng const*)$r, (double const)$sigma);
			]"
		end

	c_gsl_ran_gaussian_ziggurat (r: POINTER; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gaussian_ziggurat ((gsl_rng const*)$r, (double const)$sigma);
			]"
		end

	c_gsl_ran_ugaussian (r: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_ugaussian ((gsl_rng const*)$r);
			]"
		end

	c_gsl_ran_ugaussian_ratio_method (r: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_ugaussian_ratio_method ((gsl_rng const*)$r);
			]"
		end

	c_gsl_ran_gaussian_tail (r: POINTER; a: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gaussian_tail ((gsl_rng const*)$r, (double const)$a, (double const)$sigma);
			]"
		end

	c_gsl_ran_ugaussian_tail (r: POINTER; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_ugaussian_tail ((gsl_rng const*)$r, (double const)$a);
			]"
		end

	c_gsl_ran_bivariate_gaussian (r: POINTER; sigma_x: REAL_64; sigma_y: REAL_64; rho: REAL_64; x: POINTER; y: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_bivariate_gaussian ((gsl_rng const*)$r, (double)$sigma_x, (double)$sigma_y, (double)$rho, (double*)$x, (double*)$y);
			]"
		end

	c_gsl_ran_multivariate_gaussian (r: POINTER; mu: POINTER; l: POINTER; a_result: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multivariate_gaussian ((gsl_rng const*)$r, (gsl_vector const*)$mu, (gsl_matrix const*)$l, (gsl_vector*)$a_result);
			]"
		end

	c_gsl_ran_multivariate_gaussian_log_pdf (x: POINTER; mu: POINTER; l: POINTER; a_result: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multivariate_gaussian_log_pdf ((gsl_vector const*)$x, (gsl_vector const*)$mu, (gsl_matrix const*)$l, (double*)$a_result, (gsl_vector*)$work);
			]"
		end

	c_gsl_ran_multivariate_gaussian_pdf (x: POINTER; mu: POINTER; l: POINTER; a_result: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multivariate_gaussian_pdf ((gsl_vector const*)$x, (gsl_vector const*)$mu, (gsl_matrix const*)$l, (double*)$a_result, (gsl_vector*)$work);
			]"
		end

	c_gsl_ran_multivariate_gaussian_mean (x: POINTER; mu_hat: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multivariate_gaussian_mean ((gsl_matrix const*)$x, (gsl_vector*)$mu_hat);
			]"
		end

	c_gsl_ran_multivariate_gaussian_vcov (x: POINTER; sigma_hat: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multivariate_gaussian_vcov ((gsl_matrix const*)$x, (gsl_matrix*)$sigma_hat);
			]"
		end

	c_gsl_ran_wishart (r: POINTER; df: REAL_64; l: POINTER; a_result: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_wishart ((gsl_rng const*)$r, (double const)$df, (gsl_matrix const*)$l, (gsl_matrix*)$a_result, (gsl_matrix*)$work);
			]"
		end

	c_gsl_ran_wishart_log_pdf (x: POINTER; l_x: POINTER; df: REAL_64; l: POINTER; a_result: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_wishart_log_pdf ((gsl_matrix const*)$x, (gsl_matrix const*)$l_x, (double const)$df, (gsl_matrix const*)$l, (double*)$a_result, (gsl_matrix*)$work);
			]"
		end

	c_gsl_ran_wishart_pdf (x: POINTER; l_x: POINTER; df: REAL_64; l: POINTER; a_result: POINTER; work: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_wishart_pdf ((gsl_matrix const*)$x, (gsl_matrix const*)$l_x, (double const)$df, (gsl_matrix const*)$l, (double*)$a_result, (gsl_matrix*)$work);
			]"
		end

	c_gsl_ran_landau (r: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_landau ((gsl_rng const*)$r);
			]"
		end

	c_gsl_ran_geometric (r: POINTER; p: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_geometric ((gsl_rng const*)$r, (double const)$p);
			]"
		end

	c_gsl_ran_hypergeometric (r: POINTER; n1: INTEGER; n2: INTEGER; t: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_hypergeometric ((gsl_rng const*)$r, (unsigned int)$n1, (unsigned int)$n2, (unsigned int)$t);
			]"
		end

	c_gsl_ran_gumbel1 (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gumbel1 ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_gumbel2 (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_gumbel2 ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_logistic (r: POINTER; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_logistic ((gsl_rng const*)$r, (double const)$a);
			]"
		end

	c_gsl_ran_lognormal (r: POINTER; zeta: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_lognormal ((gsl_rng const*)$r, (double const)$zeta, (double const)$sigma);
			]"
		end

	c_gsl_ran_logarithmic (r: POINTER; p: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_logarithmic ((gsl_rng const*)$r, (double const)$p);
			]"
		end

	c_gsl_ran_multinomial (r: POINTER; k: INTEGER; n: INTEGER; p: POINTER; n_1: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_multinomial ((gsl_rng const*)$r, (size_t const)$k, (unsigned int const)$n, $p, $n_1);
			]"
		end

	c_gsl_ran_multinomial_pdf (k: INTEGER; p: POINTER; n: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multinomial_pdf ((size_t const)$k, $p, $n);
			]"
		end

	c_gsl_ran_multinomial_lnpdf (k: INTEGER; p: POINTER; n: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_multinomial_lnpdf ((size_t const)$k, $p, $n);
			]"
		end

	c_gsl_ran_negative_binomial (r: POINTER; p: REAL_64; n: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_negative_binomial ((gsl_rng const*)$r, (double)$p, (double)$n);
			]"
		end

	c_gsl_ran_pascal (r: POINTER; p: REAL_64; n: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_pascal ((gsl_rng const*)$r, (double)$p, (unsigned int)$n);
			]"
		end

	c_gsl_ran_pareto (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_pareto ((gsl_rng const*)$r, (double)$a, (double const)$b);
			]"
		end

	c_gsl_ran_poisson (r: POINTER; mu: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_poisson ((gsl_rng const*)$r, (double)$mu);
			]"
		end

	c_gsl_ran_poisson_array (r: POINTER; n: INTEGER; array: POINTER; mu: REAL_64)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_poisson_array ((gsl_rng const*)$r, (size_t)$n, $array, (double)$mu);
			]"
		end

	c_gsl_ran_rayleigh (r: POINTER; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_rayleigh ((gsl_rng const*)$r, (double const)$sigma);
			]"
		end

	c_gsl_ran_rayleigh_tail (r: POINTER; a: REAL_64; sigma: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_rayleigh_tail ((gsl_rng const*)$r, (double const)$a, (double const)$sigma);
			]"
		end

	c_gsl_ran_tdist (r: POINTER; nu: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_tdist ((gsl_rng const*)$r, (double const)$nu);
			]"
		end

	c_gsl_ran_laplace (r: POINTER; a: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_laplace ((gsl_rng const*)$r, (double const)$a);
			]"
		end

	c_gsl_ran_levy (r: POINTER; c: REAL_64; alpha: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_levy ((gsl_rng const*)$r, (double const)$c, (double const)$alpha);
			]"
		end

	c_gsl_ran_levy_skew (r: POINTER; c: REAL_64; alpha: REAL_64; beta: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_levy_skew ((gsl_rng const*)$r, (double const)$c, (double const)$alpha, (double const)$beta);
			]"
		end

	c_gsl_ran_weibull (r: POINTER; a: REAL_64; b: REAL_64): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_weibull ((gsl_rng const*)$r, (double const)$a, (double const)$b);
			]"
		end

	c_gsl_ran_dir_2d (r: POINTER; x: POINTER; y: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_dir_2d ((gsl_rng const*)$r, (double*)$x, (double*)$y);
			]"
		end

	c_gsl_ran_dir_2d_trig_method (r: POINTER; x: POINTER; y: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_dir_2d_trig_method ((gsl_rng const*)$r, (double*)$x, (double*)$y);
			]"
		end

	c_gsl_ran_dir_3d (r: POINTER; x: POINTER; y: POINTER; z: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_dir_3d ((gsl_rng const*)$r, (double*)$x, (double*)$y, (double*)$z);
			]"
		end

	c_gsl_ran_dir_nd (r: POINTER; n: INTEGER; x: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_dir_nd ((gsl_rng const*)$r, (size_t)$n, (double*)$x);
			]"
		end

	c_gsl_ran_shuffle (r: POINTER; base: POINTER; nmembm: INTEGER; size: INTEGER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_shuffle ((gsl_rng const*)$r, (void*)$base, (size_t)$nmembm, (size_t)$size);
			]"
		end

	c_gsl_ran_choose (r: POINTER; dest: POINTER; k: INTEGER; src: POINTER; n: INTEGER; size: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_choose ((gsl_rng const*)$r, (void*)$dest, (size_t)$k, (void*)$src, (size_t)$n, (size_t)$size);
			]"
		end

	c_gsl_ran_sample (r: POINTER; dest: POINTER; k: INTEGER; src: POINTER; n: INTEGER; size: INTEGER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_sample ((gsl_rng const*)$r, (void*)$dest, (size_t)$k, (void*)$src, (size_t)$n, (size_t)$size);
			]"
		end

	c_gsl_ran_discrete_preproc (k: INTEGER; p: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_discrete_preproc ((size_t)$k, (double const*)$p);
			]"
		end

	c_gsl_ran_discrete_free (g: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_ran_discrete_free ((gsl_ran_discrete_t*)$g);
			]"
		end

	c_gsl_ran_discrete (r: POINTER; g: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_discrete ((gsl_rng const*)$r, (gsl_ran_discrete_t const*)$g);
			]"
		end

	c_gsl_ran_discrete_pdf (k: INTEGER; g: POINTER): REAL_64
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_ran_discrete_pdf ((size_t)$k, (gsl_ran_discrete_t const*)$g);
			]"
		end

feature -- Externals Address

end
