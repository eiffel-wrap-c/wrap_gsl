note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GSL_RNG_TYPE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	name:  detachable C_STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: C_STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, a_value.item )
		end

	max: INTEGER
			-- Access member `max`
		require
			exists: exists
		do
			Result := c_max (item)
		ensure
			result_correct: Result = c_max (item)
		end

	set_max (a_value: INTEGER) 
			-- Change the value of member `max` to `a_value`.
		require
			exists: exists
		do
			set_c_max (item, a_value)
		ensure
			max_set: a_value = max
		end

	min: INTEGER
			-- Access member `min`
		require
			exists: exists
		do
			Result := c_min (item)
		ensure
			result_correct: Result = c_min (item)
		end

	set_min (a_value: INTEGER) 
			-- Change the value of member `min` to `a_value`.
		require
			exists: exists
		do
			set_c_min (item, a_value)
		ensure
			min_set: a_value = min
		end

	size: INTEGER
			-- Access member `size`
		require
			exists: exists
		do
			Result := c_size (item)
		ensure
			result_correct: Result = c_size (item)
		end

	set_size (a_value: INTEGER) 
			-- Change the value of member `size` to `a_value`.
		require
			exists: exists
		do
			set_c_size (item, a_value)
		ensure
			size_set: a_value = size
		end

	set: POINTER
			-- Access member `set`
		require
			exists: exists
		do
			Result := c_set (item)
		ensure
			result_correct: Result = c_set (item)
		end

	set_set (a_value: POINTER) 
			-- Change the value of member `set` to `a_value`.
		require
			exists: exists
		do
			set_c_set (item, a_value)
		ensure
			set_set: a_value = set
		end

	get: POINTER
			-- Access member `get`
		require
			exists: exists
		do
			Result := c_get (item)
		ensure
			result_correct: Result = c_get (item)
		end

	set_get (a_value: POINTER) 
			-- Change the value of member `get` to `a_value`.
		require
			exists: exists
		do
			set_c_get (item, a_value)
		ensure
			get_set: a_value = get
		end

	get_double: POINTER
			-- Access member `get_double`
		require
			exists: exists
		do
			Result := c_get_double (item)
		ensure
			result_correct: Result = c_get_double (item)
		end

	set_get_double (a_value: POINTER) 
			-- Change the value of member `get_double` to `a_value`.
		require
			exists: exists
		do
			set_c_get_double (item, a_value)
		ensure
			get_double_set: a_value = get_double
		end

feature {NONE} -- Implementation wrapper for struct gsl_rng_type

	sizeof_external: INTEGER 
		external
			"C inline use <eif_gsl.h>"
		alias
			"sizeof(gsl_rng_type)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_max (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->max
			]"
		end

	set_c_max (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->max =  (unsigned long int)$a_value
			]"
		ensure
			max_set: a_value = c_max (an_item)
		end

	c_min (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->min
			]"
		end

	set_c_min (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->min =  (unsigned long int)$a_value
			]"
		ensure
			min_set: a_value = c_min (an_item)
		end

	c_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->size
			]"
		end

	set_c_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->size =  (size_t)$a_value
			]"
		ensure
			size_set: a_value = c_size (an_item)
		end

	c_set (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->set
			]"
		end

	set_c_set (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->set =  (void (*) (void *state, unsigned long int seed))$a_value
			]"
		ensure
			set_set: a_value = c_set (an_item)
		end

	c_get (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->get
			]"
		end

	set_c_get (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->get =  (unsigned long int (*) (void *state))$a_value
			]"
		ensure
			get_set: a_value = c_get (an_item)
		end

	c_get_double (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->get_double
			]"
		end

	set_c_get_double (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				((gsl_rng_type*)$an_item)->get_double =  (double (*) (void *state))$a_value
			]"
		ensure
			get_double_set: a_value = c_get_double (an_item)
		end

end
