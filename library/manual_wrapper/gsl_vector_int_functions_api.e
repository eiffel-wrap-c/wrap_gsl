note
	description: "This file has been generated by EWG. Moved to manual wrapping"
	generator: "Eiffel Wrapper Generator"

class GSL_VECTOR_INT_FUNCTIONS_API


feature -- Access

	gsl_vector_int_alloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_alloc ((size_t const)$n);
			]"
		end

	gsl_vector_int_calloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_calloc ((size_t const)$n);
			]"
		end

	gsl_vector_int_alloc_from_block (b: GSL_BLOCK_INT_STRUCT_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_INT_STRUCT_API
		do
			if attached c_gsl_vector_int_alloc_from_block (b.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_alloc_from_vector (v: GSL_VECTOR_INT_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_INT_STRUCT_API
		do
			if attached c_gsl_vector_int_alloc_from_vector (v.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_free (v: GSL_VECTOR_INT_STRUCT_API)
		do
			c_gsl_vector_int_free (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_view_array (v: POINTER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_view_array (v, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_view_array_with_stride (base, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_const_view_array (v: POINTER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_const_view_array (v, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_const_view_array_with_stride (base, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_subvector (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_subvector (v.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_subvector_with_stride (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_const_subvector (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_const_subvector (v.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_const_subvector_with_stride (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_INT_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_int_const_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_int_set_zero (v: GSL_VECTOR_INT_STRUCT_API)
		do
			c_gsl_vector_int_set_zero (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_set_all (v: GSL_VECTOR_INT_STRUCT_API; x: INTEGER)
		do
			c_gsl_vector_int_set_all (v.item, x)
		ensure
			instsance_free: class
		end

	gsl_vector_int_set_basis (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER): INTEGER
		do
			Result := c_gsl_vector_int_set_basis (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_int_fread (stream: FILE; v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_fread (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_fwrite (stream: FILE; v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_fwrite (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_fscanf (stream: FILE; v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_fscanf (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_fprintf (stream: FILE; v: GSL_VECTOR_INT_STRUCT_API; format: STRING): INTEGER
		local
			format_c_string: C_STRING
		do
			create format_c_string.make (format)
			Result := c_gsl_vector_int_fprintf (stream.file_pointer, v.item, format_c_string.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_memcpy (dest: GSL_VECTOR_INT_STRUCT_API; src: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_memcpy (dest.item, src.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_reverse (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_reverse (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_swap (v: GSL_VECTOR_INT_STRUCT_API; w: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_swap (v.item, w.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_swap_elements (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER; j: INTEGER): INTEGER
		do
			Result := c_gsl_vector_int_swap_elements (v.item, i, j)
		ensure
			instsance_free: class
		end

	gsl_vector_int_max (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_max (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_min (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_min (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_minmax (v: GSL_VECTOR_INT_STRUCT_API; min_out: POINTER; max_out: POINTER)
		do
			c_gsl_vector_int_minmax (v.item, min_out, max_out)
		ensure
			instsance_free: class
		end

	gsl_vector_int_max_index (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_max_index (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_min_index (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_min_index (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_minmax_index (v: GSL_VECTOR_INT_STRUCT_API; imin: POINTER; imax: POINTER)
		do
			c_gsl_vector_int_minmax_index (v.item, imin, imax)
		ensure
			instsance_free: class
		end

	gsl_vector_int_add (a: GSL_VECTOR_INT_STRUCT_API; b: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_add (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_sub (a: GSL_VECTOR_INT_STRUCT_API; b: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_sub (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_mul (a: GSL_VECTOR_INT_STRUCT_API; b: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_mul (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_div (a: GSL_VECTOR_INT_STRUCT_API; b: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_div (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_scale (a: GSL_VECTOR_INT_STRUCT_API; x: INTEGER): INTEGER
		do
			Result := c_gsl_vector_int_scale (a.item, x)
		ensure
			instsance_free: class
		end

	gsl_vector_int_add_constant (a: GSL_VECTOR_INT_STRUCT_API; x: REAL_64): INTEGER
		do
			Result := c_gsl_vector_int_add_constant (a.item, x)
		ensure
			instsance_free: class
		end

	gsl_vector_int_axpby (alpha: INTEGER; x: GSL_VECTOR_INT_STRUCT_API; beta: INTEGER; y: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_axpby (alpha, x.item, beta, y.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_equal (u: GSL_VECTOR_INT_STRUCT_API; v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_equal (u.item, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_isnull (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_isnull (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_ispos (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_ispos (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_isneg (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_isneg (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_isnonneg (v: GSL_VECTOR_INT_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_int_isnonneg (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_int_get (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER): INTEGER
		do
			Result := c_gsl_vector_int_get (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_int_set (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER; x: INTEGER)
		do
			c_gsl_vector_int_set (v.item, i, x)
		ensure
			instsance_free: class
		end

	gsl_vector_int_ptr (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER): POINTER
		do
			Result := c_gsl_vector_int_ptr (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_int_const_ptr (v: GSL_VECTOR_INT_STRUCT_API; i: INTEGER): POINTER
		do
			Result := c_gsl_vector_int_const_ptr (v.item, i)
		ensure
			instsance_free: class
		end

feature -- Externals

	c_gsl_vector_int_alloc_from_block (b: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_alloc_from_block ((gsl_block_int*)$b, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_int_alloc_from_vector (v: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_alloc_from_vector ((gsl_vector_int*)$v, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_int_free (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_int_free ((gsl_vector_int*)$v);
			]"
		end

	c_gsl_vector_int_view_array (v: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_view *result = (_gsl_vector_int_view*) malloc (sizeof(_gsl_vector_int_view));
				*result = gsl_vector_int_view_array ((int*)$v, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_view *result = (_gsl_vector_int_view*) malloc (sizeof(_gsl_vector_int_view));
				*result = gsl_vector_int_view_array_with_stride ((int*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_const_view_array (v: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_const_view *result = (_gsl_vector_int_const_view*) malloc (sizeof(_gsl_vector_int_const_view));
				*result = gsl_vector_int_const_view_array ((int const*)$v, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_const_view *result = (_gsl_vector_int_const_view*) malloc (sizeof(_gsl_vector_int_const_view));
				*result = gsl_vector_int_const_view_array_with_stride ((int const*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_subvector (v: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_view *result = (_gsl_vector_int_view*) malloc (sizeof(_gsl_vector_int_view));
				*result = gsl_vector_int_subvector ((gsl_vector_int*)$v, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_view *result = (_gsl_vector_int_view*) malloc (sizeof(_gsl_vector_int_view));
				*result = gsl_vector_int_subvector_with_stride ((gsl_vector_int*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_const_subvector (v: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_const_view *result = (_gsl_vector_int_const_view*) malloc (sizeof(_gsl_vector_int_const_view));
				*result = gsl_vector_int_const_subvector ((gsl_vector_int const*)$v, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_const_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_int_const_view *result = (_gsl_vector_int_const_view*) malloc (sizeof(_gsl_vector_int_const_view));
				*result = gsl_vector_int_const_subvector_with_stride ((gsl_vector_int const*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_int_set_zero (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_int_set_zero ((gsl_vector_int*)$v);
			]"
		end

	c_gsl_vector_int_set_all (v: POINTER; x: INTEGER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_int_set_all ((gsl_vector_int*)$v, (int)$x);
			]"
		end

	c_gsl_vector_int_set_basis (v: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_set_basis ((gsl_vector_int*)$v, (size_t)$i);
			]"
		end

	c_gsl_vector_int_fread (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_fread ((FILE*)$stream, (gsl_vector_int*)$v);
			]"
		end

	c_gsl_vector_int_fwrite (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_fwrite ((FILE*)$stream, (gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_fscanf (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_fscanf ((FILE*)$stream, (gsl_vector_int*)$v);
			]"
		end

	c_gsl_vector_int_fprintf (stream: POINTER; v: POINTER; format: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_fprintf ((FILE*)$stream, (gsl_vector_int const*)$v, (char const*)$format);
			]"
		end

	c_gsl_vector_int_memcpy (dest: POINTER; src: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_memcpy ((gsl_vector_int*)$dest, (gsl_vector_int const*)$src);
			]"
		end

	c_gsl_vector_int_reverse (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_reverse ((gsl_vector_int*)$v);
			]"
		end

	c_gsl_vector_int_swap (v: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_swap ((gsl_vector_int*)$v, (gsl_vector_int*)$w);
			]"
		end

	c_gsl_vector_int_swap_elements (v: POINTER; i: INTEGER; j: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_swap_elements ((gsl_vector_int*)$v, (size_t const)$i, (size_t const)$j);
			]"
		end

	c_gsl_vector_int_max (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_max ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_min (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_min ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_minmax (v: POINTER; min_out: POINTER; max_out: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_int_minmax ((gsl_vector_int const*)$v, (int*)$min_out, (int*)$max_out);
			]"
		end

	c_gsl_vector_int_max_index (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_max_index ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_min_index (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_min_index ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_minmax_index (v: POINTER; imin: POINTER; imax: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_int_minmax_index ((gsl_vector_int const*)$v, (size_t*)$imin, (size_t*)$imax);
			]"
		end

	c_gsl_vector_int_add (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_add ((gsl_vector_int*)$a, (gsl_vector_int const*)$b);
			]"
		end

	c_gsl_vector_int_sub (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_sub ((gsl_vector_int*)$a, (gsl_vector_int const*)$b);
			]"
		end

	c_gsl_vector_int_mul (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_mul ((gsl_vector_int*)$a, (gsl_vector_int const*)$b);
			]"
		end

	c_gsl_vector_int_div (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_div ((gsl_vector_int*)$a, (gsl_vector_int const*)$b);
			]"
		end

	c_gsl_vector_int_scale (a: POINTER; x: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_scale ((gsl_vector_int*)$a, (int const)$x);
			]"
		end

	c_gsl_vector_int_add_constant (a: POINTER; x: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_add_constant ((gsl_vector_int*)$a, (double const)$x);
			]"
		end

	c_gsl_vector_int_axpby (alpha: INTEGER; x: POINTER; beta: INTEGER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_axpby ((int const)$alpha, (gsl_vector_int const*)$x, (int const)$beta, (gsl_vector_int*)$y);
			]"
		end

	c_gsl_vector_int_equal (u: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_equal ((gsl_vector_int const*)$u, (gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_isnull (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_isnull ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_ispos (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_ispos ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_isneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_isneg ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_isnonneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_isnonneg ((gsl_vector_int const*)$v);
			]"
		end

	c_gsl_vector_int_get (v: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_get ((gsl_vector_int const*)$v, (size_t const)$i);
			]"
		end

	c_gsl_vector_int_set (v: POINTER; i: INTEGER; x: INTEGER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_int_set ((gsl_vector_int*)$v, (size_t const)$i, (int)$x);
			]"
		end

	c_gsl_vector_int_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_ptr ((gsl_vector_int*)$v, (size_t const)$i);
			]"
		end

	c_gsl_vector_int_const_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_int_const_ptr ((gsl_vector_int const*)$v, (size_t const)$i);
			]"
		end

feature -- Externals Address

end
