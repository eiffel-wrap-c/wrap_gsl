note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GSL_VECTOR_CHAR_FUNCTIONS_API

feature -- Access

	gsl_vector_char_alloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_alloc ((size_t const)$n);
			]"
		end

	gsl_vector_char_calloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_calloc ((size_t const)$n);
			]"
		end

	gsl_vector_char_alloc_from_block (b: GSL_BLOCK_CHAR_STRUCT_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_CHAR_STRUCT_API
		do
			if attached c_gsl_vector_char_alloc_from_block (b.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_char_alloc_from_vector (v: GSL_VECTOR_CHAR_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_CHAR_STRUCT_API
		do
			if attached c_gsl_vector_char_alloc_from_vector (v.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_char_free (v: GSL_VECTOR_CHAR_STRUCT_API)
		do
			c_gsl_vector_char_free (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_view_array (v: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				_gsl_vector_char_view *result = (_gsl_vector_char_view*) malloc (sizeof(_gsl_vector_char_view));
				*result = gsl_vector_char_view_array ((char*)$v, (size_t)$n);
				return result;
			]"
		end

	gsl_vector_char_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				_gsl_vector_char_view *result = (_gsl_vector_char_view*) malloc (sizeof(_gsl_vector_char_view));
				*result = gsl_vector_char_view_array_with_stride ((char*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	gsl_vector_char_const_view_array (v: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				_gsl_vector_char_const_view *result = (_gsl_vector_char_const_view*) malloc (sizeof(_gsl_vector_char_const_view));
				*result = gsl_vector_char_const_view_array ((char const*)$v, (size_t)$n);
				return result;
			]"
		end

	gsl_vector_char_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				_gsl_vector_char_const_view *result = (_gsl_vector_char_const_view*) malloc (sizeof(_gsl_vector_char_const_view));
				*result = gsl_vector_char_const_view_array_with_stride ((char const*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	gsl_vector_char_subvector (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_CHAR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_char_subvector (v.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_char_subvector_with_stride (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_CHAR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_char_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_char_const_subvector (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_CHAR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_char_const_subvector (v.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_char_const_subvector_with_stride (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_CHAR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_char_const_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_char_set_zero (v: GSL_VECTOR_CHAR_STRUCT_API)
		do
			c_gsl_vector_char_set_zero (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_set_all (v: GSL_VECTOR_CHAR_STRUCT_API; x: CHARACTER)
		do
			c_gsl_vector_char_set_all (v.item, x)
		ensure
			instsance_free: class
		end

	gsl_vector_char_set_basis (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER): INTEGER
		do
			Result := c_gsl_vector_char_set_basis (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_char_fread (stream: FILE; v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_fread (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_fwrite (stream: FILE; v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_fwrite (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_fscanf (stream: FILE; v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_fscanf (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_fprintf (stream: FILE; v: GSL_VECTOR_CHAR_STRUCT_API; format: STRING): INTEGER
		local
			format_c_string: C_STRING
		do
			create format_c_string.make (format)
			Result := c_gsl_vector_char_fprintf (stream.file_pointer, v.item, format_c_string.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_memcpy (dest: GSL_VECTOR_CHAR_STRUCT_API; src: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_memcpy (dest.item, src.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_reverse (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_reverse (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_swap (v: GSL_VECTOR_CHAR_STRUCT_API; w: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_swap (v.item, w.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_swap_elements (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER; j: INTEGER): INTEGER
		do
			Result := c_gsl_vector_char_swap_elements (v.item, i, j)
		ensure
			instsance_free: class
		end

	gsl_vector_char_max (v: GSL_VECTOR_CHAR_STRUCT_API): CHARACTER
		do
			Result := c_gsl_vector_char_max (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_min (v: GSL_VECTOR_CHAR_STRUCT_API): CHARACTER
		do
			Result := c_gsl_vector_char_min (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_minmax (v: GSL_VECTOR_CHAR_STRUCT_API; min_out: STRING; max_out: STRING)
		local
			min_out_c_string: C_STRING
			max_out_c_string: C_STRING
		do
			create min_out_c_string.make (min_out)
			create max_out_c_string.make (max_out)
			c_gsl_vector_char_minmax (v.item, min_out_c_string.item, max_out_c_string.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_max_index (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_max_index (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_min_index (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_min_index (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_minmax_index (v: GSL_VECTOR_CHAR_STRUCT_API; imin: POINTER; imax: POINTER)
		do
			c_gsl_vector_char_minmax_index (v.item, imin, imax)
		ensure
			instsance_free: class
		end

	gsl_vector_char_add (a: GSL_VECTOR_CHAR_STRUCT_API; b: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_add (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_sub (a: GSL_VECTOR_CHAR_STRUCT_API; b: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_sub (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_mul (a: GSL_VECTOR_CHAR_STRUCT_API; b: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_mul (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_div (a: GSL_VECTOR_CHAR_STRUCT_API; b: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_div (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_scale (a: GSL_VECTOR_CHAR_STRUCT_API; x: CHARACTER): INTEGER
		do
			Result := c_gsl_vector_char_scale (a.item, x)
		ensure
			instsance_free: class
		end

	gsl_vector_char_add_constant (a: GSL_VECTOR_CHAR_STRUCT_API; x: REAL_64): INTEGER
		do
			Result := c_gsl_vector_char_add_constant (a.item, x)
		ensure
			instsance_free: class
		end

	gsl_vector_char_axpby (alpha: CHARACTER; x: GSL_VECTOR_CHAR_STRUCT_API; beta: CHARACTER; y: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_axpby (alpha, x.item, beta, y.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_equal (u: GSL_VECTOR_CHAR_STRUCT_API; v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_equal (u.item, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_isnull (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_isnull (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_ispos (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_ispos (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_isneg (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_isneg (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_isnonneg (v: GSL_VECTOR_CHAR_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_char_isnonneg (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_char_get (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER): CHARACTER
		do
			Result := c_gsl_vector_char_get (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_char_set (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER; x: CHARACTER)
		do
			c_gsl_vector_char_set (v.item, i, x)
		ensure
			instsance_free: class
		end

	gsl_vector_char_ptr (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER): POINTER
		do
			Result := c_gsl_vector_char_ptr (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_char_const_ptr (v: GSL_VECTOR_CHAR_STRUCT_API; i: INTEGER): POINTER
		do
			Result := c_gsl_vector_char_const_ptr (v.item, i)
		ensure
			instsance_free: class
		end

feature -- Externals

	c_gsl_vector_char_alloc_from_block (b: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_alloc_from_block ((gsl_block_char*)$b, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_char_alloc_from_vector (v: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_alloc_from_vector ((gsl_vector_char*)$v, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_char_free (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_char_free ((gsl_vector_char*)$v);
			]"
		end

	c_gsl_vector_char_subvector (v: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_char_view *result = (_gsl_vector_char_view*) malloc (sizeof(_gsl_vector_char_view));
				*result = gsl_vector_char_subvector ((gsl_vector_char*)$v, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_char_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_char_view *result = (_gsl_vector_char_view*) malloc (sizeof(_gsl_vector_char_view));
				*result = gsl_vector_char_subvector_with_stride ((gsl_vector_char*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_char_const_subvector (v: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_char_const_view *result = (_gsl_vector_char_const_view*) malloc (sizeof(_gsl_vector_char_const_view));
				*result = gsl_vector_char_const_subvector ((gsl_vector_char const*)$v, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_char_const_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_char_const_view *result = (_gsl_vector_char_const_view*) malloc (sizeof(_gsl_vector_char_const_view));
				*result = gsl_vector_char_const_subvector_with_stride ((gsl_vector_char const*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_char_set_zero (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_char_set_zero ((gsl_vector_char*)$v);
			]"
		end

	c_gsl_vector_char_set_all (v: POINTER; x: CHARACTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_char_set_all ((gsl_vector_char*)$v, (char)$x);
			]"
		end

	c_gsl_vector_char_set_basis (v: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_set_basis ((gsl_vector_char*)$v, (size_t)$i);
			]"
		end

	c_gsl_vector_char_fread (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_fread ((FILE*)$stream, (gsl_vector_char*)$v);
			]"
		end

	c_gsl_vector_char_fwrite (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_fwrite ((FILE*)$stream, (gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_fscanf (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_fscanf ((FILE*)$stream, (gsl_vector_char*)$v);
			]"
		end

	c_gsl_vector_char_fprintf (stream: POINTER; v: POINTER; format: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_fprintf ((FILE*)$stream, (gsl_vector_char const*)$v, (char const*)$format);
			]"
		end

	c_gsl_vector_char_memcpy (dest: POINTER; src: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_memcpy ((gsl_vector_char*)$dest, (gsl_vector_char const*)$src);
			]"
		end

	c_gsl_vector_char_reverse (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_reverse ((gsl_vector_char*)$v);
			]"
		end

	c_gsl_vector_char_swap (v: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_swap ((gsl_vector_char*)$v, (gsl_vector_char*)$w);
			]"
		end

	c_gsl_vector_char_swap_elements (v: POINTER; i: INTEGER; j: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_swap_elements ((gsl_vector_char*)$v, (size_t const)$i, (size_t const)$j);
			]"
		end

	c_gsl_vector_char_max (v: POINTER): CHARACTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_max ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_min (v: POINTER): CHARACTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_min ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_minmax (v: POINTER; min_out: POINTER; max_out: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_char_minmax ((gsl_vector_char const*)$v, (char*)$min_out, (char*)$max_out);
			]"
		end

	c_gsl_vector_char_max_index (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_max_index ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_min_index (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_min_index ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_minmax_index (v: POINTER; imin: POINTER; imax: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_char_minmax_index ((gsl_vector_char const*)$v, (size_t*)$imin, (size_t*)$imax);
			]"
		end

	c_gsl_vector_char_add (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_add ((gsl_vector_char*)$a, (gsl_vector_char const*)$b);
			]"
		end

	c_gsl_vector_char_sub (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_sub ((gsl_vector_char*)$a, (gsl_vector_char const*)$b);
			]"
		end

	c_gsl_vector_char_mul (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_mul ((gsl_vector_char*)$a, (gsl_vector_char const*)$b);
			]"
		end

	c_gsl_vector_char_div (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_div ((gsl_vector_char*)$a, (gsl_vector_char const*)$b);
			]"
		end

	c_gsl_vector_char_scale (a: POINTER; x: CHARACTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_scale ((gsl_vector_char*)$a, (char const)$x);
			]"
		end

	c_gsl_vector_char_add_constant (a: POINTER; x: REAL_64): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_add_constant ((gsl_vector_char*)$a, (double const)$x);
			]"
		end

	c_gsl_vector_char_axpby (alpha: CHARACTER; x: POINTER; beta: CHARACTER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_axpby ((char const)$alpha, (gsl_vector_char const*)$x, (char const)$beta, (gsl_vector_char*)$y);
			]"
		end

	c_gsl_vector_char_equal (u: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_equal ((gsl_vector_char const*)$u, (gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_isnull (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_isnull ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_ispos (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_ispos ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_isneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_isneg ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_isnonneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_isnonneg ((gsl_vector_char const*)$v);
			]"
		end

	c_gsl_vector_char_get (v: POINTER; i: INTEGER): CHARACTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_get ((gsl_vector_char const*)$v, (size_t const)$i);
			]"
		end

	c_gsl_vector_char_set (v: POINTER; i: INTEGER; x: CHARACTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_char_set ((gsl_vector_char*)$v, (size_t const)$i, (char)$x);
			]"
		end

	c_gsl_vector_char_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_ptr ((gsl_vector_char*)$v, (size_t const)$i);
			]"
		end

	c_gsl_vector_char_const_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_char_const_ptr ((gsl_vector_char const*)$v, (size_t const)$i);
			]"
		end

feature -- Externals Address

end
