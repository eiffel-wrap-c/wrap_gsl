note
	description: "This file has been generated by EWG. Moved manual wrapping"
	generator: "Eiffel Wrapper Generator"

class GSL_VECTOR_COMPLEX_DOUBLE_FUNCTIONS_API

feature -- Access

	gsl_vector_complex_alloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_alloc ((size_t const)$n);
			]"
		end

	gsl_vector_complex_calloc (n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_calloc ((size_t const)$n);
			]"
		end

	gsl_vector_complex_alloc_from_block (b: GSL_BLOCK_COMPLEX_STRUCT_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_COMPLEX_STRUCT_API
		do
			if attached c_gsl_vector_complex_alloc_from_block (b.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_alloc_from_vector (v: GSL_VECTOR_COMPLEX_STRUCT_API; offset: INTEGER; n: INTEGER; stride: INTEGER): detachable GSL_VECTOR_COMPLEX_STRUCT_API
		do
			if attached c_gsl_vector_complex_alloc_from_vector (v.item, offset, n, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_free (v: GSL_VECTOR_COMPLEX_STRUCT_API)
		do
			c_gsl_vector_complex_free (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_view_array (base: POINTER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_view_array (base, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_view_array_with_stride (base, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_view_array (base: POINTER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_view_array (base, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_view_array_with_stride (base, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_subvector (base: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_subvector (base.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_subvector_with_stride (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_subvector (base: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_subvector (base.item, i, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_subvector_with_stride (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER; stride: INTEGER; n: INTEGER): detachable GSL_VECTOR_COMPLEX_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_subvector_with_stride (v.item, i, stride, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_real (v: GSL_VECTOR_COMPLEX_STRUCT_API): detachable GSL_VECTOR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_real (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_imag (v: GSL_VECTOR_COMPLEX_STRUCT_API): detachable GSL_VECTOR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_imag (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_real (v: GSL_VECTOR_COMPLEX_STRUCT_API): detachable GSL_VECTOR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_real (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_imag (v: GSL_VECTOR_COMPLEX_STRUCT_API): detachable GSL_VECTOR_VIEW_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_imag (v.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_set_zero (v: GSL_VECTOR_COMPLEX_STRUCT_API)
		do
			c_gsl_vector_complex_set_zero (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_set_all (v: GSL_VECTOR_COMPLEX_STRUCT_API; z: GSL_COMPLEX_STRUCT_API)
		do
			c_gsl_vector_complex_set_all (v.item, z.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_set_basis (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER): INTEGER
		do
			Result := c_gsl_vector_complex_set_basis (v.item, i)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_fread (stream: FILE; v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_fread (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_fwrite (stream: FILE; v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_fwrite (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_fscanf (stream: FILE; v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_fscanf (stream.file_pointer, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_fprintf (stream: FILE; v: GSL_VECTOR_COMPLEX_STRUCT_API; format: STRING): INTEGER
		local
			format_c_string: C_STRING
		do
			create format_c_string.make (format)
			Result := c_gsl_vector_complex_fprintf (stream.file_pointer, v.item, format_c_string.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_memcpy (dest: GSL_VECTOR_COMPLEX_STRUCT_API; src: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_memcpy (dest.item, src.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_reverse (v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_reverse (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_swap (v: GSL_VECTOR_COMPLEX_STRUCT_API; w: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_swap (v.item, w.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_swap_elements (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER; j: INTEGER): INTEGER
		do
			Result := c_gsl_vector_complex_swap_elements (v.item, i, j)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_equal (u: GSL_VECTOR_COMPLEX_STRUCT_API; v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_equal (u.item, v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_isnull (v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_isnull (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_ispos (v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_ispos (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_isneg (v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_isneg (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_isnonneg (v: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_isnonneg (v.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_add (a: GSL_VECTOR_COMPLEX_STRUCT_API; b: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_add (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_sub (a: GSL_VECTOR_COMPLEX_STRUCT_API; b: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_sub (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_mul (a: GSL_VECTOR_COMPLEX_STRUCT_API; b: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_mul (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_div (a: GSL_VECTOR_COMPLEX_STRUCT_API; b: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_div (a.item, b.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_scale (a: GSL_VECTOR_COMPLEX_STRUCT_API; x: GSL_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_scale (a.item, x.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_add_constant (a: GSL_VECTOR_COMPLEX_STRUCT_API; x: GSL_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_add_constant (a.item, x.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_axpby (alpha: GSL_COMPLEX_STRUCT_API; x: GSL_VECTOR_COMPLEX_STRUCT_API; beta: GSL_COMPLEX_STRUCT_API; y: GSL_VECTOR_COMPLEX_STRUCT_API): INTEGER
		do
			Result := c_gsl_vector_complex_axpby (alpha.item, x.item, beta.item, y.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_get (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER): detachable GSL_COMPLEX_STRUCT_API
		do
			if attached c_gsl_vector_complex_get (v.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_set (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER; z: GSL_COMPLEX_STRUCT_API)
		do
			c_gsl_vector_complex_set (v.item, i, z.item)
		ensure
			instsance_free: class
		end

	gsl_vector_complex_ptr (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER): detachable GSL_COMPLEX_STRUCT_API
		do
			if attached c_gsl_vector_complex_ptr (v.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

	gsl_vector_complex_const_ptr (v: GSL_VECTOR_COMPLEX_STRUCT_API; i: INTEGER): detachable GSL_COMPLEX_STRUCT_API
		do
			if attached c_gsl_vector_complex_const_ptr (v.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instsance_free: class
		end

feature -- Externals

	c_gsl_vector_complex_alloc_from_block (b: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_alloc_from_block ((gsl_block_complex*)$b, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_complex_alloc_from_vector (v: POINTER; offset: INTEGER; n: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_alloc_from_vector ((gsl_vector_complex*)$v, (size_t const)$offset, (size_t const)$n, (size_t const)$stride);
			]"
		end

	c_gsl_vector_complex_free (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_free ((gsl_vector_complex*)$v);
			]"
		end

	c_gsl_vector_complex_view_array (base: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_view *result = (_gsl_vector_complex_view*) malloc (sizeof(_gsl_vector_complex_view));
				*result = gsl_vector_complex_view_array ((double*)$base, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_view *result = (_gsl_vector_complex_view*) malloc (sizeof(_gsl_vector_complex_view));
				*result = gsl_vector_complex_view_array_with_stride ((double*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_const_view_array (base: POINTER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_const_view *result = (_gsl_vector_complex_const_view*) malloc (sizeof(_gsl_vector_complex_const_view));
				*result = gsl_vector_complex_const_view_array ((double const*)$base, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_const_view_array_with_stride (base: POINTER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_const_view *result = (_gsl_vector_complex_const_view*) malloc (sizeof(_gsl_vector_complex_const_view));
				*result = gsl_vector_complex_const_view_array_with_stride ((double const*)$base, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_subvector (base: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_view *result = (_gsl_vector_complex_view*) malloc (sizeof(_gsl_vector_complex_view));
				*result = gsl_vector_complex_subvector ((gsl_vector_complex*)$base, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_view *result = (_gsl_vector_complex_view*) malloc (sizeof(_gsl_vector_complex_view));
				*result = gsl_vector_complex_subvector_with_stride ((gsl_vector_complex*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_const_subvector (base: POINTER; i: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_const_view *result = (_gsl_vector_complex_const_view*) malloc (sizeof(_gsl_vector_complex_const_view));
				*result = gsl_vector_complex_const_subvector ((gsl_vector_complex const*)$base, (size_t)$i, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_const_subvector_with_stride (v: POINTER; i: INTEGER; stride: INTEGER; n: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_complex_const_view *result = (_gsl_vector_complex_const_view*) malloc (sizeof(_gsl_vector_complex_const_view));
				*result = gsl_vector_complex_const_subvector_with_stride ((gsl_vector_complex const*)$v, (size_t)$i, (size_t)$stride, (size_t)$n);
				return result;
			]"
		end

	c_gsl_vector_complex_real (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_view *result = (_gsl_vector_view*) malloc (sizeof(_gsl_vector_view));
				*result = gsl_vector_complex_real ((gsl_vector_complex*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_imag (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_view *result = (_gsl_vector_view*) malloc (sizeof(_gsl_vector_view));
				*result = gsl_vector_complex_imag ((gsl_vector_complex*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_const_real (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_const_view *result = (_gsl_vector_const_view*) malloc (sizeof(_gsl_vector_const_view));
				*result = gsl_vector_complex_const_real ((gsl_vector_complex const*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_const_imag (v: POINTER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				_gsl_vector_const_view *result = (_gsl_vector_const_view*) malloc (sizeof(_gsl_vector_const_view));
				*result = gsl_vector_complex_const_imag ((gsl_vector_complex const*)$v);
				return result;
			]"
		end

	c_gsl_vector_complex_set_zero (v: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_set_zero ((gsl_vector_complex*)$v);
			]"
		end

	c_gsl_vector_complex_set_all (v: POINTER; z: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_set_all ((gsl_vector_complex*)$v, *(gsl_complex*)$z);
			]"
		end

	c_gsl_vector_complex_set_basis (v: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_set_basis ((gsl_vector_complex*)$v, (size_t)$i);
			]"
		end

	c_gsl_vector_complex_fread (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_fread ((FILE*)$stream, (gsl_vector_complex*)$v);
			]"
		end

	c_gsl_vector_complex_fwrite (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_fwrite ((FILE*)$stream, (gsl_vector_complex const*)$v);
			]"
		end

	c_gsl_vector_complex_fscanf (stream: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_fscanf ((FILE*)$stream, (gsl_vector_complex*)$v);
			]"
		end

	c_gsl_vector_complex_fprintf (stream: POINTER; v: POINTER; format: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_fprintf ((FILE*)$stream, (gsl_vector_complex const*)$v, (char const*)$format);
			]"
		end

	c_gsl_vector_complex_memcpy (dest: POINTER; src: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_memcpy ((gsl_vector_complex*)$dest, (gsl_vector_complex const*)$src);
			]"
		end

	c_gsl_vector_complex_reverse (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_reverse ((gsl_vector_complex*)$v);
			]"
		end

	c_gsl_vector_complex_swap (v: POINTER; w: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_swap ((gsl_vector_complex*)$v, (gsl_vector_complex*)$w);
			]"
		end

	c_gsl_vector_complex_swap_elements (v: POINTER; i: INTEGER; j: INTEGER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_swap_elements ((gsl_vector_complex*)$v, (size_t const)$i, (size_t const)$j);
			]"
		end

	c_gsl_vector_complex_equal (u: POINTER; v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_equal ((gsl_vector_complex const*)$u, (gsl_vector_complex const*)$v);
			]"
		end

	c_gsl_vector_complex_isnull (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_isnull ((gsl_vector_complex const*)$v);
			]"
		end

	c_gsl_vector_complex_ispos (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_ispos ((gsl_vector_complex const*)$v);
			]"
		end

	c_gsl_vector_complex_isneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_isneg ((gsl_vector_complex const*)$v);
			]"
		end

	c_gsl_vector_complex_isnonneg (v: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_isnonneg ((gsl_vector_complex const*)$v);
			]"
		end

	c_gsl_vector_complex_add (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_add ((gsl_vector_complex*)$a, (gsl_vector_complex const*)$b);
			]"
		end

	c_gsl_vector_complex_sub (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_sub ((gsl_vector_complex*)$a, (gsl_vector_complex const*)$b);
			]"
		end

	c_gsl_vector_complex_mul (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_mul ((gsl_vector_complex*)$a, (gsl_vector_complex const*)$b);
			]"
		end

	c_gsl_vector_complex_div (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_div ((gsl_vector_complex*)$a, (gsl_vector_complex const*)$b);
			]"
		end

	c_gsl_vector_complex_scale (a: POINTER; x: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_scale ((gsl_vector_complex*)$a, *(gsl_complex const*)$x);
			]"
		end

	c_gsl_vector_complex_add_constant (a: POINTER; x: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_add_constant ((gsl_vector_complex*)$a, *(gsl_complex const*)$x);
			]"
		end

	c_gsl_vector_complex_axpby (alpha: POINTER; x: POINTER; beta: POINTER; y: POINTER): INTEGER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_axpby (*(gsl_complex const*)$alpha, (gsl_vector_complex const*)$x, *(gsl_complex const*)$beta, (gsl_vector_complex*)$y);
			]"
		end

	c_gsl_vector_complex_get (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"

		alias
			"[
				gsl_complex *result = (gsl_complex*) malloc (sizeof(gsl_complex));
				*result = gsl_vector_complex_get ((gsl_vector_complex const*)$v, (size_t const)$i);
				return result;
			]"
		end

	c_gsl_vector_complex_set (v: POINTER; i: INTEGER; z: POINTER)
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				gsl_vector_complex_set ((gsl_vector_complex*)$v, (size_t const)$i, *(gsl_complex*)$z);
			]"
		end

	c_gsl_vector_complex_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_ptr ((gsl_vector_complex*)$v, (size_t const)$i);
			]"
		end

	c_gsl_vector_complex_const_ptr (v: POINTER; i: INTEGER): POINTER
		external
			"C inline use <eif_gsl.h>"
		alias
			"[
				return gsl_vector_complex_const_ptr ((gsl_vector_complex const*)$v, (size_t const)$i);
			]"
		end

feature -- Externals Address

end
